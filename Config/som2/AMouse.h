
/*
 * This file was generated by the SOM Compiler.
 * FileName: .\AMouse.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 * 
 * PROGRAMMNAME: AMOUSE
 * 
 * 
 * VERSION: 2.80
 * 
 * 
 * MODULNAME: AMOUSE.IDL
 * 
 * 
 * BESCHREIBUNG:
 * 
 *   idl file for AMouse class: mouse settings program derived from standard
 *   OS/2 WPMouse class
 * 
 *  Ver.    Date      Comment
 * 
 *  1.00    20-02-00  First release
 *  2.00    06-16-01  WheelThread in separate process
 *  2.10    05-12-02  Handling of shift-keys
 *  2.20    10-03-02  USB support added
 *  2.40    02-01-03  support for 2 wheels; wildcards for process name
 *  2.50    04-20-03  application behaviour support added
 *  2.60    06-13-04  remove unused settings pages from mouse object
 *  2.70    10-23-04  support for 7 buttons added
 *  2.80    10-02-06  support of arbitary key combinations
 * 
 *  Copyright (C) noller & breining software 2001...2006
 * 
 *  =====================================================================#
 *                                                                       #
 *   CLASS: AMouse                                                       #
 *                                                                       #
 *   CLASS HIERARCHY:                                                    #
 *                                                                       #
 *       SOMObject                                                       #
 *         ¿ƒƒ WPObject                                                  #
 *               ¿ƒƒ WPAbstract                                          #
 *                     ¿ƒƒ WPMouse                                       #
 *                           ¿ƒƒ AMouse                                  #
 *                                                                       #
 *  =====================================================================#
 */


#ifndef SOM_AMouse_h
#define SOM_AMouse_h


/*
 * Passthru lines: File: "C.h", "before"
 */


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef AMouse
#define AMouse SOMObject
#endif
#include <wpmouse.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef WPFolder
    #define WPFolder SOMObject
#endif /* WPFolder */
#ifndef M_WPObject
    #define M_WPObject SOMObject
#endif /* M_WPObject */
#ifndef WPObject
    #define WPObject SOMObject
#endif /* WPObject */
#ifndef WPImageFile
    #define WPImageFile SOMObject
#endif /* WPImageFile */
#ifndef M_WPAbstract
    #define M_WPAbstract SOMObject
#endif /* M_WPAbstract */
#ifndef M_WPMouse
    #define M_WPMouse SOMObject
#endif /* M_WPMouse */
#ifndef M_AMouse
    #define M_AMouse SOMObject
#endif /* M_AMouse */

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.h", "after"
 */

 /* Benutzerdefinierte Ansichten; siehe auch IDM_*-Werte in res.h */
 #define OPEN_ABOUT      OPEN_USER           // Produktinformation
 #define OPEN_DEBUG      OPEN_USER+1         // DEBUG-Einstellungen

 #define CCHMAXPGNAME    32                  // max. StringlÑnge fÅr Seitennamen


#define AMouse_MajorVersion 1
#define AMouse_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define AMouseNewClass AMousec
#pragma linkage(AMousec, system)
#define AMouseClassData AMoused
#define AMouseCClassData AMousex
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define AMouse_classObj AMouseClassData.classObject
#define _AMouse AMouse_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK AMouseNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(AMouseNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct AMouseClassDataStructure {
	SOMClass *classObject;
	somMToken AddDeviceInfoPage;
	somMToken AddWlDeviceInfoPage;
	somMToken AddWheelSettings1Page;
	somMToken AddWheelSettings2Page;
	somMToken AddWheelSettings3Page;
	somMToken AddKeySettings1Page;
	somMToken AddKeySettings2Page;
	somMToken AddTimingSettingsPage;
	somMToken RemoveUnusedMousePage;
} SOMDLINK AMouseClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct AMouseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK AMouseCClassData;

/*
 * New and Renew macros for AMouse
 */
#define AMouseNew() \
   ( _AMouse ? \
	_somNew(_AMouse) \
	: ( AMouseNewClass(\
		AMouse_MajorVersion, \
		AMouse_MinorVersion),\
	   _somNew(_AMouse)))
#define AMouseRenew(buf) \
   ( _AMouse ? \
	_somRenew(_AMouse, buf) \
	: ( AMouseNewClass(\
		AMouse_MajorVersion, \
		AMouse_MinorVersion),\
	   _somRenew(_AMouse, buf)))

/*
 * Override method: wpAddMouseTimingPage
 */
#define AMouse_wpAddMouseTimingPage(somSelf,hwndNotebook) \
	WPMouse_wpAddMouseTimingPage(somSelf,hwndNotebook)

/*
 * Override method: wpAddMouseMappingsPage
 */
#define AMouse_wpAddMouseMappingsPage(somSelf,hwndNotebook) \
	WPMouse_wpAddMouseMappingsPage(somSelf,hwndNotebook)

/*
 * Override method: wpAddSettingsPages
 */
#define AMouse_wpAddSettingsPages(somSelf,hwndNotebook) \
	WPObject_wpAddSettingsPages(somSelf,hwndNotebook)

/*
 * Override method: wpModifyPopupMenu
 */
#define AMouse_wpModifyPopupMenu(somSelf,hwndMenu,hwndCnr,iPosition) \
	WPObject_wpModifyPopupMenu(somSelf,hwndMenu,hwndCnr,iPosition)

/*
 * Override method: wpFilterPopupMenu
 */
#define AMouse_wpFilterPopupMenu(somSelf,ulFlags,hwndCnr,fMultiSelect) \
	WPObject_wpFilterPopupMenu(somSelf,ulFlags,hwndCnr,fMultiSelect)

/*
 * Override method: wpMenuItemSelected
 */
#define AMouse_wpMenuItemSelected(somSelf,hwndFrame,ulMenuId) \
	WPObject_wpMenuItemSelected(somSelf,hwndFrame,ulMenuId)

/*
 * Override method: wpOpen
 */
#define AMouse_wpOpen(somSelf,hwndCnr,ulView,param) \
	WPObject_wpOpen(somSelf,hwndCnr,ulView,param)

/*
 * Override method: wpSetup
 */
#define AMouse_wpSetup(somSelf,pszSetupString) \
	WPObject_wpSetup(somSelf,pszSetupString)

/*
 * New Method: AddDeviceInfoPage
 */
typedef ULONG   SOMLINK somTP_AMouse_AddDeviceInfoPage(AMouse *somSelf, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddDeviceInfoPage, system)
typedef somTP_AMouse_AddDeviceInfoPage *somTD_AMouse_AddDeviceInfoPage;
/*
 *  METHOD: AddDeviceInfoPage                              ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddDeviceInfoPage "::AMouse::AddDeviceInfoPage"
#define AMouse_AddDeviceInfoPage(somSelf,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddDeviceInfoPage) \
	(somSelf,hwndNotebook))
#ifndef SOMGD_AddDeviceInfoPage
    #if (defined(_AddDeviceInfoPage) || defined(__AddDeviceInfoPage))
        #undef _AddDeviceInfoPage
        #undef __AddDeviceInfoPage
        #define SOMGD_AddDeviceInfoPage 1
    #else
        #define _AddDeviceInfoPage AMouse_AddDeviceInfoPage
    #endif /* _AddDeviceInfoPage */
#endif /* SOMGD_AddDeviceInfoPage */

/*
 * New Method: AddWlDeviceInfoPage
 */
typedef ULONG   SOMLINK somTP_AMouse_AddWlDeviceInfoPage(AMouse *somSelf, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddWlDeviceInfoPage, system)
typedef somTP_AMouse_AddWlDeviceInfoPage *somTD_AMouse_AddWlDeviceInfoPage;
/*
 *  METHOD: AddWlDeviceInfoPage                            ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the wireless device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddWlDeviceInfoPage "::AMouse::AddWlDeviceInfoPage"
#define AMouse_AddWlDeviceInfoPage(somSelf,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddWlDeviceInfoPage) \
	(somSelf,hwndNotebook))
#ifndef SOMGD_AddWlDeviceInfoPage
    #if (defined(_AddWlDeviceInfoPage) || defined(__AddWlDeviceInfoPage))
        #undef _AddWlDeviceInfoPage
        #undef __AddWlDeviceInfoPage
        #define SOMGD_AddWlDeviceInfoPage 1
    #else
        #define _AddWlDeviceInfoPage AMouse_AddWlDeviceInfoPage
    #endif /* _AddWlDeviceInfoPage */
#endif /* SOMGD_AddWlDeviceInfoPage */

/*
 * New Method: AddWheelSettings1Page
 */
typedef ULONG   SOMLINK somTP_AMouse_AddWheelSettings1Page(AMouse *somSelf, 
		ULONG ulWheelPageType, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddWheelSettings1Page, system)
typedef somTP_AMouse_AddWheelSettings1Page *somTD_AMouse_AddWheelSettings1Page;
/*
 *  METHOD: AddWheelSettings1Page                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddWheelSettings1Page "::AMouse::AddWheelSettings1Page"
#define AMouse_AddWheelSettings1Page(somSelf,ulWheelPageType,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddWheelSettings1Page) \
	(somSelf,ulWheelPageType,hwndNotebook))
#ifndef SOMGD_AddWheelSettings1Page
    #if (defined(_AddWheelSettings1Page) || defined(__AddWheelSettings1Page))
        #undef _AddWheelSettings1Page
        #undef __AddWheelSettings1Page
        #define SOMGD_AddWheelSettings1Page 1
    #else
        #define _AddWheelSettings1Page AMouse_AddWheelSettings1Page
    #endif /* _AddWheelSettings1Page */
#endif /* SOMGD_AddWheelSettings1Page */

/*
 * New Method: AddWheelSettings2Page
 */
typedef ULONG   SOMLINK somTP_AMouse_AddWheelSettings2Page(AMouse *somSelf, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddWheelSettings2Page, system)
typedef somTP_AMouse_AddWheelSettings2Page *somTD_AMouse_AddWheelSettings2Page;
/*
 *  METHOD: AddWheelSettings2Page                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddWheelSettings2Page "::AMouse::AddWheelSettings2Page"
#define AMouse_AddWheelSettings2Page(somSelf,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddWheelSettings2Page) \
	(somSelf,hwndNotebook))
#ifndef SOMGD_AddWheelSettings2Page
    #if (defined(_AddWheelSettings2Page) || defined(__AddWheelSettings2Page))
        #undef _AddWheelSettings2Page
        #undef __AddWheelSettings2Page
        #define SOMGD_AddWheelSettings2Page 1
    #else
        #define _AddWheelSettings2Page AMouse_AddWheelSettings2Page
    #endif /* _AddWheelSettings2Page */
#endif /* SOMGD_AddWheelSettings2Page */

/*
 * New Method: AddWheelSettings3Page
 */
typedef ULONG   SOMLINK somTP_AMouse_AddWheelSettings3Page(AMouse *somSelf, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddWheelSettings3Page, system)
typedef somTP_AMouse_AddWheelSettings3Page *somTD_AMouse_AddWheelSettings3Page;
/*
 *  METHOD: AddWheelSettings3Page                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddWheelSettings3Page "::AMouse::AddWheelSettings3Page"
#define AMouse_AddWheelSettings3Page(somSelf,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddWheelSettings3Page) \
	(somSelf,hwndNotebook))
#ifndef SOMGD_AddWheelSettings3Page
    #if (defined(_AddWheelSettings3Page) || defined(__AddWheelSettings3Page))
        #undef _AddWheelSettings3Page
        #undef __AddWheelSettings3Page
        #define SOMGD_AddWheelSettings3Page 1
    #else
        #define _AddWheelSettings3Page AMouse_AddWheelSettings3Page
    #endif /* _AddWheelSettings3Page */
#endif /* SOMGD_AddWheelSettings3Page */

/*
 * New Method: AddKeySettings1Page
 */
typedef ULONG   SOMLINK somTP_AMouse_AddKeySettings1Page(AMouse *somSelf, 
		ULONG ulBtnPageType, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddKeySettings1Page, system)
typedef somTP_AMouse_AddKeySettings1Page *somTD_AMouse_AddKeySettings1Page;
/*
 *  METHOD: AddKeySettings1Page                            ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the key setings 1 page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddKeySettings1Page "::AMouse::AddKeySettings1Page"
#define AMouse_AddKeySettings1Page(somSelf,ulBtnPageType,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddKeySettings1Page) \
	(somSelf,ulBtnPageType,hwndNotebook))
#ifndef SOMGD_AddKeySettings1Page
    #if (defined(_AddKeySettings1Page) || defined(__AddKeySettings1Page))
        #undef _AddKeySettings1Page
        #undef __AddKeySettings1Page
        #define SOMGD_AddKeySettings1Page 1
    #else
        #define _AddKeySettings1Page AMouse_AddKeySettings1Page
    #endif /* _AddKeySettings1Page */
#endif /* SOMGD_AddKeySettings1Page */

/*
 * New Method: AddKeySettings2Page
 */
typedef ULONG   SOMLINK somTP_AMouse_AddKeySettings2Page(AMouse *somSelf, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddKeySettings2Page, system)
typedef somTP_AMouse_AddKeySettings2Page *somTD_AMouse_AddKeySettings2Page;
/*
 *  METHOD: AddKeySettings2Page                            ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the key settings 2 page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddKeySettings2Page "::AMouse::AddKeySettings2Page"
#define AMouse_AddKeySettings2Page(somSelf,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddKeySettings2Page) \
	(somSelf,hwndNotebook))
#ifndef SOMGD_AddKeySettings2Page
    #if (defined(_AddKeySettings2Page) || defined(__AddKeySettings2Page))
        #undef _AddKeySettings2Page
        #undef __AddKeySettings2Page
        #define SOMGD_AddKeySettings2Page 1
    #else
        #define _AddKeySettings2Page AMouse_AddKeySettings2Page
    #endif /* _AddKeySettings2Page */
#endif /* SOMGD_AddKeySettings2Page */

/*
 * New Method: AddTimingSettingsPage
 */
typedef ULONG   SOMLINK somTP_AMouse_AddTimingSettingsPage(AMouse *somSelf, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_AddTimingSettingsPage, system)
typedef somTP_AMouse_AddTimingSettingsPage *somTD_AMouse_AddTimingSettingsPage;
/*
 *  METHOD: AddTimingSettingsPage                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the timing page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#define somMD_AMouse_AddTimingSettingsPage "::AMouse::AddTimingSettingsPage"
#define AMouse_AddTimingSettingsPage(somSelf,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, AddTimingSettingsPage) \
	(somSelf,hwndNotebook))
#ifndef SOMGD_AddTimingSettingsPage
    #if (defined(_AddTimingSettingsPage) || defined(__AddTimingSettingsPage))
        #undef _AddTimingSettingsPage
        #undef __AddTimingSettingsPage
        #define SOMGD_AddTimingSettingsPage 1
    #else
        #define _AddTimingSettingsPage AMouse_AddTimingSettingsPage
    #endif /* _AddTimingSettingsPage */
#endif /* SOMGD_AddTimingSettingsPage */

/*
 * New Method: RemoveUnusedMousePage
 */
typedef ULONG   SOMLINK somTP_AMouse_RemoveUnusedMousePage(AMouse *somSelf, 
		HWND hwndNotebook);
#pragma linkage(somTP_AMouse_RemoveUnusedMousePage, system)
typedef somTP_AMouse_RemoveUnusedMousePage *somTD_AMouse_RemoveUnusedMousePage;
/*
 *  METHOD: RemoveUnusedMousePage                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method removes unused settings pages from the settings
 *    notebook.
 * 
 *  RETURN:
 *    SETTINGS_PAGE_REMOVED
 */
#define somMD_AMouse_RemoveUnusedMousePage "::AMouse::RemoveUnusedMousePage"
#define AMouse_RemoveUnusedMousePage(somSelf,hwndNotebook) \
    (SOM_Resolve(somSelf, AMouse, RemoveUnusedMousePage) \
	(somSelf,hwndNotebook))
#ifndef SOMGD_RemoveUnusedMousePage
    #if (defined(_RemoveUnusedMousePage) || defined(__RemoveUnusedMousePage))
        #undef _RemoveUnusedMousePage
        #undef __RemoveUnusedMousePage
        #define SOMGD_RemoveUnusedMousePage 1
    #else
        #define _RemoveUnusedMousePage AMouse_RemoveUnusedMousePage
    #endif /* _RemoveUnusedMousePage */
#endif /* SOMGD_RemoveUnusedMousePage */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define AMouse_wpAddMouseTypePage WPMouse_wpAddMouseTypePage
#define AMouse_wpAddMousePtrPage WPMouse_wpAddMousePtrPage
#define AMouse_wpAddMouseCometPage WPMouse_wpAddMouseCometPage
#define AMouse_wpAddObjectWindowPage WPObject_wpAddObjectWindowPage
#define AMouse_wpFilterMenu WPObject_wpFilterMenu
#define AMouse_somDefaultInit SOMObject_somDefaultInit
#define AMouse_somDestruct SOMObject_somDestruct
#define AMouse_wpQueryHandle WPObject_wpQueryHandle
#define AMouse_wpSaveImmediate WPObject_wpSaveImmediate
#define AMouse_wpSaveState WPObject_wpSaveState
#define AMouse_wpRestoreState WPObject_wpRestoreState
#define AMouse_wpSetTitle WPObject_wpSetTitle
#define AMouse_wpCopyObject WPObject_wpCopyObject
#define AMouse_wpMoveObject WPObject_wpMoveObject
#define AMouse_wpQueryIcon WPObject_wpQueryIcon
#define AMouse_wpQueryIconData WPObject_wpQueryIconData
#define AMouse_wpSetIconData WPObject_wpSetIconData
#define AMouse_wpDragOver WPObject_wpDragOver
#define AMouse_wpReplaceObject WPObject_wpReplaceObject
#define AMouse_wpQueryNameClashOptions WPObject_wpQueryNameClashOptions
#define AMouse_wpIdentify WPObject_wpIdentify
#define AMouse_wpAddObjectGeneralPage WPObject_wpAddObjectGeneralPage
#define AMouse_wpAddObjectGeneralPage2 WPObject_wpAddObjectGeneralPage2
#define AMouse_wpAddToObjUseList WPObject_wpAddToObjUseList
#define AMouse_wpAllocMem WPObject_wpAllocMem
#define AMouse_wpAppendObject WPObject_wpAppendObject
#define AMouse_wpAssertObjectMutexSem WPObject_wpAssertObjectMutexSem
#define AMouse_wpClose WPObject_wpClose
#define AMouse_wpCnrInsertObject WPObject_wpCnrInsertObject
#define AMouse_wpCnrRemoveObject WPObject_wpCnrRemoveObject
#define AMouse_wpCnrSetEmphasis WPObject_wpCnrSetEmphasis
#define AMouse_wpConfirmDelete WPObject_wpConfirmDelete
#define AMouse_wpConfirmObjectTitle WPObject_wpConfirmObjectTitle
#define AMouse_wpCopiedFromTemplate WPObject_wpCopiedFromTemplate
#define AMouse_wpCreateAnother WPObject_wpCreateAnother
#define AMouse_wpCreateFromTemplate WPObject_wpCreateFromTemplate
#define AMouse_wpCreateShadowObject WPObject_wpCreateShadowObject
#define AMouse_wpDelete WPObject_wpDelete
#define AMouse_wpDeleteFromObjUseList WPObject_wpDeleteFromObjUseList
#define AMouse_wpDisplayHelp WPObject_wpDisplayHelp
#define AMouse_wpDisplayMenu WPObject_wpDisplayMenu
#define AMouse_wpDoesObjectMatch WPObject_wpDoesObjectMatch
#define AMouse_wpDraggedOverObject WPObject_wpDraggedOverObject
#define AMouse_wpDrop WPObject_wpDrop
#define AMouse_wpDroppedOnObject WPObject_wpDroppedOnObject
#define AMouse_wpEndConversation WPObject_wpEndConversation
#define AMouse_wpFindUseItem WPObject_wpFindUseItem
#define AMouse_wpFormatDragItem WPObject_wpFormatDragItem
#define AMouse_wpFree WPObject_wpFree
#define AMouse_wpFreeMem WPObject_wpFreeMem
#define AMouse_wpHide WPObject_wpHide
#define AMouse_wpInitData WPObject_wpInitData
#define AMouse_wpInsertPopupMenuItems WPObject_wpInsertPopupMenuItems
#define AMouse_wpInsertMenuItems WPObject_wpInsertMenuItems
#define AMouse_wpInsertSettingsPage WPObject_wpInsertSettingsPage
#define AMouse_wpMenuItemHelpSelected WPObject_wpMenuItemHelpSelected
#define AMouse_wpModifyMenu WPObject_wpModifyMenu
#define AMouse_wpPrintObject WPObject_wpPrintObject
#define AMouse_wpQueryConcurrentView WPObject_wpQueryConcurrentView
#define AMouse_wpQueryButtonAppearance WPObject_wpQueryButtonAppearance
#define AMouse_wpQueryConfirmations WPObject_wpQueryConfirmations
#define AMouse_wpQueryDefaultHelp WPObject_wpQueryDefaultHelp
#define AMouse_wpQueryDefaultView WPObject_wpQueryDefaultView
#define AMouse_wpQueryDetailsData WPObject_wpQueryDetailsData
#define AMouse_wpQueryError WPObject_wpQueryError
#define AMouse_wpSetFolder WPObject_wpSetFolder
#define AMouse_wpQueryFolder WPObject_wpQueryFolder
#define AMouse_wpQueryMinWindow WPObject_wpQueryMinWindow
#define AMouse_wpQueryStyle WPObject_wpQueryStyle
#define AMouse_wpSetTaskRec WPObject_wpSetTaskRec
#define AMouse_wpFindTaskRec WPObject_wpFindTaskRec
#define AMouse_wpQueryTitle WPObject_wpQueryTitle
#define AMouse_wpRegisterView WPObject_wpRegisterView
#define AMouse_wpReleaseObjectMutexSem WPObject_wpReleaseObjectMutexSem
#define AMouse_wpRender WPObject_wpRender
#define AMouse_wpRenderComplete WPObject_wpRenderComplete
#define AMouse_wpRequestObjectMutexSem WPObject_wpRequestObjectMutexSem
#define AMouse_wpRestore WPObject_wpRestore
#define AMouse_wpRestoreData WPObject_wpRestoreData
#define AMouse_wpRestoreLong WPObject_wpRestoreLong
#define AMouse_wpRestoreString WPObject_wpRestoreString
#define AMouse_wpSaveData WPObject_wpSaveData
#define AMouse_wpSaveDeferred WPObject_wpSaveDeferred
#define AMouse_wpSaveLong WPObject_wpSaveLong
#define AMouse_wpSaveString WPObject_wpSaveString
#define AMouse_wpScanSetupString WPObject_wpScanSetupString
#define AMouse_wpSetConcurrentView WPObject_wpSetConcurrentView
#define AMouse_wpSetButtonAppearance WPObject_wpSetButtonAppearance
#define AMouse_wpSetDefaultHelp WPObject_wpSetDefaultHelp
#define AMouse_wpSetDefaultView WPObject_wpSetDefaultView
#define AMouse_wpSetError WPObject_wpSetError
#define AMouse_wpQueryScreenGroupID WPObject_wpQueryScreenGroupID
#define AMouse_wpSetupOnce WPObject_wpSetupOnce
#define AMouse_wpSetIcon WPObject_wpSetIcon
#define AMouse_wpSetMinWindow WPObject_wpSetMinWindow
#define AMouse_wpModifyStyle WPObject_wpModifyStyle
#define AMouse_wpSwitchTo WPObject_wpSwitchTo
#define AMouse_wpUnInitData WPObject_wpUnInitData
#define AMouse_wpViewObject WPObject_wpViewObject
#define AMouse_wpQueryTrueStyle WPObject_wpQueryTrueStyle
#define AMouse_wpUnlockObject WPObject_wpUnlockObject
#define AMouse_wpObjectReady WPObject_wpObjectReady
#define AMouse_wpIsObjectInitialized WPObject_wpIsObjectInitialized
#define AMouse_wpCreateShadowObjectExt WPObject_wpCreateShadowObjectExt
#define AMouse_wpCnrDeleteUseItem WPObject_wpCnrDeleteUseItem
#define AMouse_wpIsDeleteable WPObject_wpIsDeleteable
#define AMouse_wpQueryCoreRecord WPObject_wpQueryCoreRecord
#define AMouse_wpSetObjectID WPObject_wpSetObjectID
#define AMouse_wpQueryObjectID WPObject_wpQueryObjectID
#define AMouse_wpSetDefaultIconPos WPObject_wpSetDefaultIconPos
#define AMouse_wpQueryDefaultIconPos WPObject_wpQueryDefaultIconPos
#define AMouse_wpCnrRefreshDetails WPObject_wpCnrRefreshDetails
#define AMouse_wpFindViewItem WPObject_wpFindViewItem
#define AMouse_wpLockObject WPObject_wpLockObject
#define AMouse_wpIsLocked WPObject_wpIsLocked
#define AMouse_wpQueryContainerFlagPtr WPObject_wpQueryContainerFlagPtr
#define AMouse_wpWaitForClose WPObject_wpWaitForClose
#define AMouse_wpSetMenuStyle WPObject_wpSetMenuStyle
#define AMouse_wpQueryMenuStyle WPObject_wpQueryMenuStyle
#define AMouse_wpSetStyle WPObject_wpSetStyle
#define AMouse_somInit SOMObject_somInit
#define AMouse_somUninit SOMObject_somUninit
#define AMouse_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define AMouse_somDefaultAssign SOMObject_somDefaultAssign
#define AMouse_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define AMouse_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define AMouse_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define AMouse_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define AMouse_somDefaultVAssign SOMObject_somDefaultVAssign
#define AMouse_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define AMouse_somFree SOMObject_somFree
#define AMouse_somGetClass SOMObject_somGetClass
#define AMouse_somGetClassName SOMObject_somGetClassName
#define AMouse_somGetSize SOMObject_somGetSize
#define AMouse_somIsA SOMObject_somIsA
#define AMouse_somIsInstanceOf SOMObject_somIsInstanceOf
#define AMouse_somRespondsTo SOMObject_somRespondsTo
#define AMouse_somDispatch SOMObject_somDispatch
#define AMouse_somClassDispatch SOMObject_somClassDispatch
#define AMouse_somCastObj SOMObject_somCastObj
#define AMouse_somResetObj SOMObject_somResetObj
#define AMouse_somDispatchV SOMObject_somDispatchV
#define AMouse_somDispatchL SOMObject_somDispatchL
#define AMouse_somDispatchA SOMObject_somDispatchA
#define AMouse_somDispatchD SOMObject_somDispatchD
#define AMouse_somPrintSelf SOMObject_somPrintSelf
#define AMouse_somDumpSelf SOMObject_somDumpSelf
#define AMouse_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_AMouse_h */

#ifndef SOM_M_AMouse_h
#define SOM_M_AMouse_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef M_AMouse
#define M_AMouse SOMObject
#endif
/*
 *  New types -- Define OS/2 type names to the class interface
 */
#include <wpmouse.h>

/*
 * Start of bindings for IDL types
 */

typedef
unsigned long  M_AMouse_HMODULE;
typedef
unsigned long  M_AMouse_HPOINTER;
typedef
string  M_AMouse_PSZ;
/*
 *  New class methods
 */


#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_HMODULE
    #ifdef HMODULE
        #undef HMODULE
        #define SOMTGD_HMODULE 1
    #else
        #define HMODULE M_AMouse_HMODULE
    #endif /* HMODULE */
#endif /* SOMTGD_HMODULE */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_HPOINTER
    #ifdef HPOINTER
        #undef HPOINTER
        #define SOMTGD_HPOINTER 1
    #else
        #define HPOINTER M_AMouse_HPOINTER
    #endif /* HPOINTER */
#endif /* SOMTGD_HPOINTER */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_PSZ
    #ifdef PSZ
        #undef PSZ
        #define SOMTGD_PSZ 1
    #else
        #define PSZ M_AMouse_PSZ
    #endif /* PSZ */
#endif /* SOMTGD_PSZ */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

#define M_AMouse_MajorVersion 1
#define M_AMouse_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define M_AMouseNewClass c
#pragma linkage(c, system)
#define M_AMouseClassData d
#define M_AMouseCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define M_AMouse_classObj M_AMouseClassData.classObject
#define _M_AMouse M_AMouse_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK M_AMouseNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(M_AMouseNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct M_AMouseClassDataStructure {
	SOMClass *classObject;
	somMToken clsSaveData;
	somMToken clsSetScrollMode;
	somMToken clsGetScrollMode;
	somMToken clsSetScrollNum;
	somMToken clsGetScrollNum;
	somMToken clsSetWheelTarget;
	somMToken clsGetWheelTarget;
	somMToken clsSetStartupMode;
	somMToken clsGetStartupMode;
	somMToken clsSetAccelDelay;
	somMToken clsGetAccelDelay;
	somMToken clsSetAccelValue;
	somMToken clsGetAccelValue;
	somMToken clsSetPollingRate;
	somMToken clsGetPollingRate;
	somMToken clsSetAccelLevel1;
	somMToken clsGetAccelLevel1;
	somMToken clsSetAccelLvl1Mult;
	somMToken clsGetAccelLvl1Mult;
	somMToken clsSetAccelLevel2;
	somMToken clsGetAccelLevel2;
	somMToken clsSetAccelLvl2Mult;
	somMToken clsGetAccelLvl2Mult;
	somMToken clsSetBtnMode;
	somMToken clsGetBtnMode;
	somMToken clsSetBtnKeyCombMP1;
	somMToken clsGetBtnKeyCombMP1;
	somMToken clsSetBtnKeyCombMP2;
	somMToken clsGetBtnKeyCombMP2;
	somMToken clsSetWheelCount;
	somMToken clsGetWheelCount;
	somMToken clsSetApplications;
	somMToken clsGetApplications;
	somMToken clsSetPMCtlsFlags;
	somMToken clsGetPMCtlsFlags;
	somMToken clsSetSmartCruise;
	somMToken clsGetSmartCruise;
} SOMDLINK M_AMouseClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct M_AMouseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK M_AMouseCClassData;

/*
 * New and Renew macros for M_AMouse
 */
#define M_AMouseNew() \
   ( _M_AMouse ? \
	_somNew(_M_AMouse) \
	: ( M_AMouseNewClass(\
		M_AMouse_MajorVersion, \
		M_AMouse_MinorVersion),\
	   _somNew(_M_AMouse)))
#define M_AMouseRenew(buf) \
   ( _M_AMouse ? \
	_somRenew(_M_AMouse, buf) \
	: ( M_AMouseNewClass(\
		M_AMouse_MajorVersion, \
		M_AMouse_MinorVersion),\
	   _somRenew(_M_AMouse, buf)))

/*
 * Override method: wpclsInitData
 */
#define M_AMouse_wpclsInitData(somSelf) \
	M_WPObject_wpclsInitData(somSelf)

/*
 * Override method: wpclsUnInitData
 */
#define M_AMouse_wpclsUnInitData(somSelf) \
	M_WPObject_wpclsUnInitData(somSelf)

/*
 * Override method: wpclsQueryDefaultView
 */
#define M_AMouse_wpclsQueryDefaultView(somSelf) \
	M_WPObject_wpclsQueryDefaultView(somSelf)

/*
 * Override method: wpclsQueryIcon
 */
#define M_AMouse_wpclsQueryIcon(somSelf) \
	M_WPObject_wpclsQueryIcon(somSelf)

/*
 * Override method: wpclsQueryDefaultHelp
 */
#define M_AMouse_wpclsQueryDefaultHelp(somSelf,pHelpPanelId,pszHelpLibrary) \
	M_WPObject_wpclsQueryDefaultHelp(somSelf,pHelpPanelId,pszHelpLibrary)

/*
 * New Method: clsSaveData
 */
typedef void   SOMLINK somTP_M_AMouse_clsSaveData(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsSaveData, system)
typedef somTP_M_AMouse_clsSaveData *somTD_M_AMouse_clsSaveData;
#define somMD_M_AMouse_clsSaveData "::M_AMouse::clsSaveData"
#define M_AMouse_clsSaveData(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsSaveData) \
	(somSelf))
#ifndef SOMGD_clsSaveData
    #if (defined(_clsSaveData) || defined(__clsSaveData))
        #undef _clsSaveData
        #undef __clsSaveData
        #define SOMGD_clsSaveData 1
    #else
        #define _clsSaveData M_AMouse_clsSaveData
    #endif /* _clsSaveData */
#endif /* SOMGD_clsSaveData */

/*
 * New Method: clsSetScrollMode
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetScrollMode(M_AMouse *somSelf, 
		ULONG ulWheelPageType, 
		ULONG ulScrollMode);
#pragma linkage(somTP_M_AMouse_clsSetScrollMode, system)
typedef somTP_M_AMouse_clsSetScrollMode *somTD_M_AMouse_clsSetScrollMode;
#define somMD_M_AMouse_clsSetScrollMode "::M_AMouse::clsSetScrollMode"
#define M_AMouse_clsSetScrollMode(somSelf,ulWheelPageType,ulScrollMode) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetScrollMode) \
	(somSelf,ulWheelPageType,ulScrollMode))
#ifndef SOMGD_clsSetScrollMode
    #if (defined(_clsSetScrollMode) || defined(__clsSetScrollMode))
        #undef _clsSetScrollMode
        #undef __clsSetScrollMode
        #define SOMGD_clsSetScrollMode 1
    #else
        #define _clsSetScrollMode M_AMouse_clsSetScrollMode
    #endif /* _clsSetScrollMode */
#endif /* SOMGD_clsSetScrollMode */

/*
 * New Method: clsGetScrollMode
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetScrollMode(M_AMouse *somSelf, 
		ULONG ulWheelPageType);
#pragma linkage(somTP_M_AMouse_clsGetScrollMode, system)
typedef somTP_M_AMouse_clsGetScrollMode *somTD_M_AMouse_clsGetScrollMode;
#define somMD_M_AMouse_clsGetScrollMode "::M_AMouse::clsGetScrollMode"
#define M_AMouse_clsGetScrollMode(somSelf,ulWheelPageType) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetScrollMode) \
	(somSelf,ulWheelPageType))
#ifndef SOMGD_clsGetScrollMode
    #if (defined(_clsGetScrollMode) || defined(__clsGetScrollMode))
        #undef _clsGetScrollMode
        #undef __clsGetScrollMode
        #define SOMGD_clsGetScrollMode 1
    #else
        #define _clsGetScrollMode M_AMouse_clsGetScrollMode
    #endif /* _clsGetScrollMode */
#endif /* SOMGD_clsGetScrollMode */

/*
 * New Method: clsSetScrollNum
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetScrollNum(M_AMouse *somSelf, 
		ULONG ulWheelPageType, 
		ULONG ulNewScrollNum);
#pragma linkage(somTP_M_AMouse_clsSetScrollNum, system)
typedef somTP_M_AMouse_clsSetScrollNum *somTD_M_AMouse_clsSetScrollNum;
#define somMD_M_AMouse_clsSetScrollNum "::M_AMouse::clsSetScrollNum"
#define M_AMouse_clsSetScrollNum(somSelf,ulWheelPageType,ulNewScrollNum) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetScrollNum) \
	(somSelf,ulWheelPageType,ulNewScrollNum))
#ifndef SOMGD_clsSetScrollNum
    #if (defined(_clsSetScrollNum) || defined(__clsSetScrollNum))
        #undef _clsSetScrollNum
        #undef __clsSetScrollNum
        #define SOMGD_clsSetScrollNum 1
    #else
        #define _clsSetScrollNum M_AMouse_clsSetScrollNum
    #endif /* _clsSetScrollNum */
#endif /* SOMGD_clsSetScrollNum */

/*
 * New Method: clsGetScrollNum
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetScrollNum(M_AMouse *somSelf, 
		ULONG ulWheelPageType);
#pragma linkage(somTP_M_AMouse_clsGetScrollNum, system)
typedef somTP_M_AMouse_clsGetScrollNum *somTD_M_AMouse_clsGetScrollNum;
#define somMD_M_AMouse_clsGetScrollNum "::M_AMouse::clsGetScrollNum"
#define M_AMouse_clsGetScrollNum(somSelf,ulWheelPageType) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetScrollNum) \
	(somSelf,ulWheelPageType))
#ifndef SOMGD_clsGetScrollNum
    #if (defined(_clsGetScrollNum) || defined(__clsGetScrollNum))
        #undef _clsGetScrollNum
        #undef __clsGetScrollNum
        #define SOMGD_clsGetScrollNum 1
    #else
        #define _clsGetScrollNum M_AMouse_clsGetScrollNum
    #endif /* _clsGetScrollNum */
#endif /* SOMGD_clsGetScrollNum */

/*
 * New Method: clsSetWheelTarget
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetWheelTarget(M_AMouse *somSelf, 
		ULONG ulWheelPageType, 
		ULONG ulNewWheelTarget);
#pragma linkage(somTP_M_AMouse_clsSetWheelTarget, system)
typedef somTP_M_AMouse_clsSetWheelTarget *somTD_M_AMouse_clsSetWheelTarget;
#define somMD_M_AMouse_clsSetWheelTarget "::M_AMouse::clsSetWheelTarget"
#define M_AMouse_clsSetWheelTarget(somSelf,ulWheelPageType,ulNewWheelTarget) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetWheelTarget) \
	(somSelf,ulWheelPageType,ulNewWheelTarget))
#ifndef SOMGD_clsSetWheelTarget
    #if (defined(_clsSetWheelTarget) || defined(__clsSetWheelTarget))
        #undef _clsSetWheelTarget
        #undef __clsSetWheelTarget
        #define SOMGD_clsSetWheelTarget 1
    #else
        #define _clsSetWheelTarget M_AMouse_clsSetWheelTarget
    #endif /* _clsSetWheelTarget */
#endif /* SOMGD_clsSetWheelTarget */

/*
 * New Method: clsGetWheelTarget
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetWheelTarget(M_AMouse *somSelf, 
		ULONG ulWheelPageType);
#pragma linkage(somTP_M_AMouse_clsGetWheelTarget, system)
typedef somTP_M_AMouse_clsGetWheelTarget *somTD_M_AMouse_clsGetWheelTarget;
#define somMD_M_AMouse_clsGetWheelTarget "::M_AMouse::clsGetWheelTarget"
#define M_AMouse_clsGetWheelTarget(somSelf,ulWheelPageType) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetWheelTarget) \
	(somSelf,ulWheelPageType))
#ifndef SOMGD_clsGetWheelTarget
    #if (defined(_clsGetWheelTarget) || defined(__clsGetWheelTarget))
        #undef _clsGetWheelTarget
        #undef __clsGetWheelTarget
        #define SOMGD_clsGetWheelTarget 1
    #else
        #define _clsGetWheelTarget M_AMouse_clsGetWheelTarget
    #endif /* _clsGetWheelTarget */
#endif /* SOMGD_clsGetWheelTarget */

/*
 * New Method: clsSetStartupMode
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetStartupMode(M_AMouse *somSelf, 
		ULONG ulStartupMode);
#pragma linkage(somTP_M_AMouse_clsSetStartupMode, system)
typedef somTP_M_AMouse_clsSetStartupMode *somTD_M_AMouse_clsSetStartupMode;
#define somMD_M_AMouse_clsSetStartupMode "::M_AMouse::clsSetStartupMode"
#define M_AMouse_clsSetStartupMode(somSelf,ulStartupMode) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetStartupMode) \
	(somSelf,ulStartupMode))
#ifndef SOMGD_clsSetStartupMode
    #if (defined(_clsSetStartupMode) || defined(__clsSetStartupMode))
        #undef _clsSetStartupMode
        #undef __clsSetStartupMode
        #define SOMGD_clsSetStartupMode 1
    #else
        #define _clsSetStartupMode M_AMouse_clsSetStartupMode
    #endif /* _clsSetStartupMode */
#endif /* SOMGD_clsSetStartupMode */

/*
 * New Method: clsGetStartupMode
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetStartupMode(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetStartupMode, system)
typedef somTP_M_AMouse_clsGetStartupMode *somTD_M_AMouse_clsGetStartupMode;
#define somMD_M_AMouse_clsGetStartupMode "::M_AMouse::clsGetStartupMode"
#define M_AMouse_clsGetStartupMode(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetStartupMode) \
	(somSelf))
#ifndef SOMGD_clsGetStartupMode
    #if (defined(_clsGetStartupMode) || defined(__clsGetStartupMode))
        #undef _clsGetStartupMode
        #undef __clsGetStartupMode
        #define SOMGD_clsGetStartupMode 1
    #else
        #define _clsGetStartupMode M_AMouse_clsGetStartupMode
    #endif /* _clsGetStartupMode */
#endif /* SOMGD_clsGetStartupMode */

/*
 * New Method: clsSetAccelDelay
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetAccelDelay(M_AMouse *somSelf, 
		ULONG ulAccelDelay);
#pragma linkage(somTP_M_AMouse_clsSetAccelDelay, system)
typedef somTP_M_AMouse_clsSetAccelDelay *somTD_M_AMouse_clsSetAccelDelay;
#define somMD_M_AMouse_clsSetAccelDelay "::M_AMouse::clsSetAccelDelay"
#define M_AMouse_clsSetAccelDelay(somSelf,ulAccelDelay) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetAccelDelay) \
	(somSelf,ulAccelDelay))
#ifndef SOMGD_clsSetAccelDelay
    #if (defined(_clsSetAccelDelay) || defined(__clsSetAccelDelay))
        #undef _clsSetAccelDelay
        #undef __clsSetAccelDelay
        #define SOMGD_clsSetAccelDelay 1
    #else
        #define _clsSetAccelDelay M_AMouse_clsSetAccelDelay
    #endif /* _clsSetAccelDelay */
#endif /* SOMGD_clsSetAccelDelay */

/*
 * New Method: clsGetAccelDelay
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetAccelDelay(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetAccelDelay, system)
typedef somTP_M_AMouse_clsGetAccelDelay *somTD_M_AMouse_clsGetAccelDelay;
#define somMD_M_AMouse_clsGetAccelDelay "::M_AMouse::clsGetAccelDelay"
#define M_AMouse_clsGetAccelDelay(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetAccelDelay) \
	(somSelf))
#ifndef SOMGD_clsGetAccelDelay
    #if (defined(_clsGetAccelDelay) || defined(__clsGetAccelDelay))
        #undef _clsGetAccelDelay
        #undef __clsGetAccelDelay
        #define SOMGD_clsGetAccelDelay 1
    #else
        #define _clsGetAccelDelay M_AMouse_clsGetAccelDelay
    #endif /* _clsGetAccelDelay */
#endif /* SOMGD_clsGetAccelDelay */

/*
 * New Method: clsSetAccelValue
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetAccelValue(M_AMouse *somSelf, 
		ULONG ulAccelValue);
#pragma linkage(somTP_M_AMouse_clsSetAccelValue, system)
typedef somTP_M_AMouse_clsSetAccelValue *somTD_M_AMouse_clsSetAccelValue;
#define somMD_M_AMouse_clsSetAccelValue "::M_AMouse::clsSetAccelValue"
#define M_AMouse_clsSetAccelValue(somSelf,ulAccelValue) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetAccelValue) \
	(somSelf,ulAccelValue))
#ifndef SOMGD_clsSetAccelValue
    #if (defined(_clsSetAccelValue) || defined(__clsSetAccelValue))
        #undef _clsSetAccelValue
        #undef __clsSetAccelValue
        #define SOMGD_clsSetAccelValue 1
    #else
        #define _clsSetAccelValue M_AMouse_clsSetAccelValue
    #endif /* _clsSetAccelValue */
#endif /* SOMGD_clsSetAccelValue */

/*
 * New Method: clsGetAccelValue
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetAccelValue(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetAccelValue, system)
typedef somTP_M_AMouse_clsGetAccelValue *somTD_M_AMouse_clsGetAccelValue;
#define somMD_M_AMouse_clsGetAccelValue "::M_AMouse::clsGetAccelValue"
#define M_AMouse_clsGetAccelValue(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetAccelValue) \
	(somSelf))
#ifndef SOMGD_clsGetAccelValue
    #if (defined(_clsGetAccelValue) || defined(__clsGetAccelValue))
        #undef _clsGetAccelValue
        #undef __clsGetAccelValue
        #define SOMGD_clsGetAccelValue 1
    #else
        #define _clsGetAccelValue M_AMouse_clsGetAccelValue
    #endif /* _clsGetAccelValue */
#endif /* SOMGD_clsGetAccelValue */

/*
 * New Method: clsSetPollingRate
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetPollingRate(M_AMouse *somSelf, 
		ULONG ulPollingRate);
#pragma linkage(somTP_M_AMouse_clsSetPollingRate, system)
typedef somTP_M_AMouse_clsSetPollingRate *somTD_M_AMouse_clsSetPollingRate;
#define somMD_M_AMouse_clsSetPollingRate "::M_AMouse::clsSetPollingRate"
#define M_AMouse_clsSetPollingRate(somSelf,ulPollingRate) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetPollingRate) \
	(somSelf,ulPollingRate))
#ifndef SOMGD_clsSetPollingRate
    #if (defined(_clsSetPollingRate) || defined(__clsSetPollingRate))
        #undef _clsSetPollingRate
        #undef __clsSetPollingRate
        #define SOMGD_clsSetPollingRate 1
    #else
        #define _clsSetPollingRate M_AMouse_clsSetPollingRate
    #endif /* _clsSetPollingRate */
#endif /* SOMGD_clsSetPollingRate */

/*
 * New Method: clsGetPollingRate
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetPollingRate(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetPollingRate, system)
typedef somTP_M_AMouse_clsGetPollingRate *somTD_M_AMouse_clsGetPollingRate;
#define somMD_M_AMouse_clsGetPollingRate "::M_AMouse::clsGetPollingRate"
#define M_AMouse_clsGetPollingRate(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetPollingRate) \
	(somSelf))
#ifndef SOMGD_clsGetPollingRate
    #if (defined(_clsGetPollingRate) || defined(__clsGetPollingRate))
        #undef _clsGetPollingRate
        #undef __clsGetPollingRate
        #define SOMGD_clsGetPollingRate 1
    #else
        #define _clsGetPollingRate M_AMouse_clsGetPollingRate
    #endif /* _clsGetPollingRate */
#endif /* SOMGD_clsGetPollingRate */

/*
 * New Method: clsSetAccelLevel1
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetAccelLevel1(M_AMouse *somSelf, 
		ULONG ulAccelLevel);
#pragma linkage(somTP_M_AMouse_clsSetAccelLevel1, system)
typedef somTP_M_AMouse_clsSetAccelLevel1 *somTD_M_AMouse_clsSetAccelLevel1;
#define somMD_M_AMouse_clsSetAccelLevel1 "::M_AMouse::clsSetAccelLevel1"
#define M_AMouse_clsSetAccelLevel1(somSelf,ulAccelLevel) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetAccelLevel1) \
	(somSelf,ulAccelLevel))
#ifndef SOMGD_clsSetAccelLevel1
    #if (defined(_clsSetAccelLevel1) || defined(__clsSetAccelLevel1))
        #undef _clsSetAccelLevel1
        #undef __clsSetAccelLevel1
        #define SOMGD_clsSetAccelLevel1 1
    #else
        #define _clsSetAccelLevel1 M_AMouse_clsSetAccelLevel1
    #endif /* _clsSetAccelLevel1 */
#endif /* SOMGD_clsSetAccelLevel1 */

/*
 * New Method: clsGetAccelLevel1
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetAccelLevel1(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetAccelLevel1, system)
typedef somTP_M_AMouse_clsGetAccelLevel1 *somTD_M_AMouse_clsGetAccelLevel1;
#define somMD_M_AMouse_clsGetAccelLevel1 "::M_AMouse::clsGetAccelLevel1"
#define M_AMouse_clsGetAccelLevel1(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetAccelLevel1) \
	(somSelf))
#ifndef SOMGD_clsGetAccelLevel1
    #if (defined(_clsGetAccelLevel1) || defined(__clsGetAccelLevel1))
        #undef _clsGetAccelLevel1
        #undef __clsGetAccelLevel1
        #define SOMGD_clsGetAccelLevel1 1
    #else
        #define _clsGetAccelLevel1 M_AMouse_clsGetAccelLevel1
    #endif /* _clsGetAccelLevel1 */
#endif /* SOMGD_clsGetAccelLevel1 */

/*
 * New Method: clsSetAccelLvl1Mult
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetAccelLvl1Mult(M_AMouse *somSelf, 
		ULONG ulAccelLvlMult);
#pragma linkage(somTP_M_AMouse_clsSetAccelLvl1Mult, system)
typedef somTP_M_AMouse_clsSetAccelLvl1Mult *somTD_M_AMouse_clsSetAccelLvl1Mult;
#define somMD_M_AMouse_clsSetAccelLvl1Mult "::M_AMouse::clsSetAccelLvl1Mult"
#define M_AMouse_clsSetAccelLvl1Mult(somSelf,ulAccelLvlMult) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetAccelLvl1Mult) \
	(somSelf,ulAccelLvlMult))
#ifndef SOMGD_clsSetAccelLvl1Mult
    #if (defined(_clsSetAccelLvl1Mult) || defined(__clsSetAccelLvl1Mult))
        #undef _clsSetAccelLvl1Mult
        #undef __clsSetAccelLvl1Mult
        #define SOMGD_clsSetAccelLvl1Mult 1
    #else
        #define _clsSetAccelLvl1Mult M_AMouse_clsSetAccelLvl1Mult
    #endif /* _clsSetAccelLvl1Mult */
#endif /* SOMGD_clsSetAccelLvl1Mult */

/*
 * New Method: clsGetAccelLvl1Mult
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetAccelLvl1Mult(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetAccelLvl1Mult, system)
typedef somTP_M_AMouse_clsGetAccelLvl1Mult *somTD_M_AMouse_clsGetAccelLvl1Mult;
#define somMD_M_AMouse_clsGetAccelLvl1Mult "::M_AMouse::clsGetAccelLvl1Mult"
#define M_AMouse_clsGetAccelLvl1Mult(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetAccelLvl1Mult) \
	(somSelf))
#ifndef SOMGD_clsGetAccelLvl1Mult
    #if (defined(_clsGetAccelLvl1Mult) || defined(__clsGetAccelLvl1Mult))
        #undef _clsGetAccelLvl1Mult
        #undef __clsGetAccelLvl1Mult
        #define SOMGD_clsGetAccelLvl1Mult 1
    #else
        #define _clsGetAccelLvl1Mult M_AMouse_clsGetAccelLvl1Mult
    #endif /* _clsGetAccelLvl1Mult */
#endif /* SOMGD_clsGetAccelLvl1Mult */

/*
 * New Method: clsSetAccelLevel2
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetAccelLevel2(M_AMouse *somSelf, 
		ULONG ulAccelLevel);
#pragma linkage(somTP_M_AMouse_clsSetAccelLevel2, system)
typedef somTP_M_AMouse_clsSetAccelLevel2 *somTD_M_AMouse_clsSetAccelLevel2;
#define somMD_M_AMouse_clsSetAccelLevel2 "::M_AMouse::clsSetAccelLevel2"
#define M_AMouse_clsSetAccelLevel2(somSelf,ulAccelLevel) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetAccelLevel2) \
	(somSelf,ulAccelLevel))
#ifndef SOMGD_clsSetAccelLevel2
    #if (defined(_clsSetAccelLevel2) || defined(__clsSetAccelLevel2))
        #undef _clsSetAccelLevel2
        #undef __clsSetAccelLevel2
        #define SOMGD_clsSetAccelLevel2 1
    #else
        #define _clsSetAccelLevel2 M_AMouse_clsSetAccelLevel2
    #endif /* _clsSetAccelLevel2 */
#endif /* SOMGD_clsSetAccelLevel2 */

/*
 * New Method: clsGetAccelLevel2
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetAccelLevel2(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetAccelLevel2, system)
typedef somTP_M_AMouse_clsGetAccelLevel2 *somTD_M_AMouse_clsGetAccelLevel2;
#define somMD_M_AMouse_clsGetAccelLevel2 "::M_AMouse::clsGetAccelLevel2"
#define M_AMouse_clsGetAccelLevel2(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetAccelLevel2) \
	(somSelf))
#ifndef SOMGD_clsGetAccelLevel2
    #if (defined(_clsGetAccelLevel2) || defined(__clsGetAccelLevel2))
        #undef _clsGetAccelLevel2
        #undef __clsGetAccelLevel2
        #define SOMGD_clsGetAccelLevel2 1
    #else
        #define _clsGetAccelLevel2 M_AMouse_clsGetAccelLevel2
    #endif /* _clsGetAccelLevel2 */
#endif /* SOMGD_clsGetAccelLevel2 */

/*
 * New Method: clsSetAccelLvl2Mult
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetAccelLvl2Mult(M_AMouse *somSelf, 
		ULONG ulAccelLvlMult);
#pragma linkage(somTP_M_AMouse_clsSetAccelLvl2Mult, system)
typedef somTP_M_AMouse_clsSetAccelLvl2Mult *somTD_M_AMouse_clsSetAccelLvl2Mult;
#define somMD_M_AMouse_clsSetAccelLvl2Mult "::M_AMouse::clsSetAccelLvl2Mult"
#define M_AMouse_clsSetAccelLvl2Mult(somSelf,ulAccelLvlMult) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetAccelLvl2Mult) \
	(somSelf,ulAccelLvlMult))
#ifndef SOMGD_clsSetAccelLvl2Mult
    #if (defined(_clsSetAccelLvl2Mult) || defined(__clsSetAccelLvl2Mult))
        #undef _clsSetAccelLvl2Mult
        #undef __clsSetAccelLvl2Mult
        #define SOMGD_clsSetAccelLvl2Mult 1
    #else
        #define _clsSetAccelLvl2Mult M_AMouse_clsSetAccelLvl2Mult
    #endif /* _clsSetAccelLvl2Mult */
#endif /* SOMGD_clsSetAccelLvl2Mult */

/*
 * New Method: clsGetAccelLvl2Mult
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetAccelLvl2Mult(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetAccelLvl2Mult, system)
typedef somTP_M_AMouse_clsGetAccelLvl2Mult *somTD_M_AMouse_clsGetAccelLvl2Mult;
#define somMD_M_AMouse_clsGetAccelLvl2Mult "::M_AMouse::clsGetAccelLvl2Mult"
#define M_AMouse_clsGetAccelLvl2Mult(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetAccelLvl2Mult) \
	(somSelf))
#ifndef SOMGD_clsGetAccelLvl2Mult
    #if (defined(_clsGetAccelLvl2Mult) || defined(__clsGetAccelLvl2Mult))
        #undef _clsGetAccelLvl2Mult
        #undef __clsGetAccelLvl2Mult
        #define SOMGD_clsGetAccelLvl2Mult 1
    #else
        #define _clsGetAccelLvl2Mult M_AMouse_clsGetAccelLvl2Mult
    #endif /* _clsGetAccelLvl2Mult */
#endif /* SOMGD_clsGetAccelLvl2Mult */

/*
 * New Method: clsSetBtnMode
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetBtnMode(M_AMouse *somSelf, 
		ULONG ulKeyPageType, 
		ULONG ulKeyNum, 
		ULONG ulBtnMode);
#pragma linkage(somTP_M_AMouse_clsSetBtnMode, system)
typedef somTP_M_AMouse_clsSetBtnMode *somTD_M_AMouse_clsSetBtnMode;
#define somMD_M_AMouse_clsSetBtnMode "::M_AMouse::clsSetBtnMode"
#define M_AMouse_clsSetBtnMode(somSelf,ulKeyPageType,ulKeyNum,ulBtnMode) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetBtnMode) \
	(somSelf,ulKeyPageType,ulKeyNum,ulBtnMode))
#ifndef SOMGD_clsSetBtnMode
    #if (defined(_clsSetBtnMode) || defined(__clsSetBtnMode))
        #undef _clsSetBtnMode
        #undef __clsSetBtnMode
        #define SOMGD_clsSetBtnMode 1
    #else
        #define _clsSetBtnMode M_AMouse_clsSetBtnMode
    #endif /* _clsSetBtnMode */
#endif /* SOMGD_clsSetBtnMode */

/*
 * New Method: clsGetBtnMode
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetBtnMode(M_AMouse *somSelf, 
		ULONG ulKeyPageType, 
		ULONG ulKeyNum);
#pragma linkage(somTP_M_AMouse_clsGetBtnMode, system)
typedef somTP_M_AMouse_clsGetBtnMode *somTD_M_AMouse_clsGetBtnMode;
#define somMD_M_AMouse_clsGetBtnMode "::M_AMouse::clsGetBtnMode"
#define M_AMouse_clsGetBtnMode(somSelf,ulKeyPageType,ulKeyNum) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetBtnMode) \
	(somSelf,ulKeyPageType,ulKeyNum))
#ifndef SOMGD_clsGetBtnMode
    #if (defined(_clsGetBtnMode) || defined(__clsGetBtnMode))
        #undef _clsGetBtnMode
        #undef __clsGetBtnMode
        #define SOMGD_clsGetBtnMode 1
    #else
        #define _clsGetBtnMode M_AMouse_clsGetBtnMode
    #endif /* _clsGetBtnMode */
#endif /* SOMGD_clsGetBtnMode */

/*
 * New Method: clsSetBtnKeyCombMP1
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetBtnKeyCombMP1(M_AMouse *somSelf, 
		ULONG ulKeyPageType, 
		ULONG ulKeyNum, 
		ULONG ulMP1);
#pragma linkage(somTP_M_AMouse_clsSetBtnKeyCombMP1, system)
typedef somTP_M_AMouse_clsSetBtnKeyCombMP1 *somTD_M_AMouse_clsSetBtnKeyCombMP1;
#define somMD_M_AMouse_clsSetBtnKeyCombMP1 "::M_AMouse::clsSetBtnKeyCombMP1"
#define M_AMouse_clsSetBtnKeyCombMP1(somSelf,ulKeyPageType,ulKeyNum,ulMP1) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetBtnKeyCombMP1) \
	(somSelf,ulKeyPageType,ulKeyNum,ulMP1))
#ifndef SOMGD_clsSetBtnKeyCombMP1
    #if (defined(_clsSetBtnKeyCombMP1) || defined(__clsSetBtnKeyCombMP1))
        #undef _clsSetBtnKeyCombMP1
        #undef __clsSetBtnKeyCombMP1
        #define SOMGD_clsSetBtnKeyCombMP1 1
    #else
        #define _clsSetBtnKeyCombMP1 M_AMouse_clsSetBtnKeyCombMP1
    #endif /* _clsSetBtnKeyCombMP1 */
#endif /* SOMGD_clsSetBtnKeyCombMP1 */

/*
 * New Method: clsGetBtnKeyCombMP1
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetBtnKeyCombMP1(M_AMouse *somSelf, 
		ULONG ulKeyPageType, 
		ULONG ulKeyNum);
#pragma linkage(somTP_M_AMouse_clsGetBtnKeyCombMP1, system)
typedef somTP_M_AMouse_clsGetBtnKeyCombMP1 *somTD_M_AMouse_clsGetBtnKeyCombMP1;
#define somMD_M_AMouse_clsGetBtnKeyCombMP1 "::M_AMouse::clsGetBtnKeyCombMP1"
#define M_AMouse_clsGetBtnKeyCombMP1(somSelf,ulKeyPageType,ulKeyNum) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetBtnKeyCombMP1) \
	(somSelf,ulKeyPageType,ulKeyNum))
#ifndef SOMGD_clsGetBtnKeyCombMP1
    #if (defined(_clsGetBtnKeyCombMP1) || defined(__clsGetBtnKeyCombMP1))
        #undef _clsGetBtnKeyCombMP1
        #undef __clsGetBtnKeyCombMP1
        #define SOMGD_clsGetBtnKeyCombMP1 1
    #else
        #define _clsGetBtnKeyCombMP1 M_AMouse_clsGetBtnKeyCombMP1
    #endif /* _clsGetBtnKeyCombMP1 */
#endif /* SOMGD_clsGetBtnKeyCombMP1 */

/*
 * New Method: clsSetBtnKeyCombMP2
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetBtnKeyCombMP2(M_AMouse *somSelf, 
		ULONG ulKeyPageType, 
		ULONG ulKeyNum, 
		ULONG ulMP2);
#pragma linkage(somTP_M_AMouse_clsSetBtnKeyCombMP2, system)
typedef somTP_M_AMouse_clsSetBtnKeyCombMP2 *somTD_M_AMouse_clsSetBtnKeyCombMP2;
#define somMD_M_AMouse_clsSetBtnKeyCombMP2 "::M_AMouse::clsSetBtnKeyCombMP2"
#define M_AMouse_clsSetBtnKeyCombMP2(somSelf,ulKeyPageType,ulKeyNum,ulMP2) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetBtnKeyCombMP2) \
	(somSelf,ulKeyPageType,ulKeyNum,ulMP2))
#ifndef SOMGD_clsSetBtnKeyCombMP2
    #if (defined(_clsSetBtnKeyCombMP2) || defined(__clsSetBtnKeyCombMP2))
        #undef _clsSetBtnKeyCombMP2
        #undef __clsSetBtnKeyCombMP2
        #define SOMGD_clsSetBtnKeyCombMP2 1
    #else
        #define _clsSetBtnKeyCombMP2 M_AMouse_clsSetBtnKeyCombMP2
    #endif /* _clsSetBtnKeyCombMP2 */
#endif /* SOMGD_clsSetBtnKeyCombMP2 */

/*
 * New Method: clsGetBtnKeyCombMP2
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetBtnKeyCombMP2(M_AMouse *somSelf, 
		ULONG ulKeyPageType, 
		ULONG ulKeyNum);
#pragma linkage(somTP_M_AMouse_clsGetBtnKeyCombMP2, system)
typedef somTP_M_AMouse_clsGetBtnKeyCombMP2 *somTD_M_AMouse_clsGetBtnKeyCombMP2;
#define somMD_M_AMouse_clsGetBtnKeyCombMP2 "::M_AMouse::clsGetBtnKeyCombMP2"
#define M_AMouse_clsGetBtnKeyCombMP2(somSelf,ulKeyPageType,ulKeyNum) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetBtnKeyCombMP2) \
	(somSelf,ulKeyPageType,ulKeyNum))
#ifndef SOMGD_clsGetBtnKeyCombMP2
    #if (defined(_clsGetBtnKeyCombMP2) || defined(__clsGetBtnKeyCombMP2))
        #undef _clsGetBtnKeyCombMP2
        #undef __clsGetBtnKeyCombMP2
        #define SOMGD_clsGetBtnKeyCombMP2 1
    #else
        #define _clsGetBtnKeyCombMP2 M_AMouse_clsGetBtnKeyCombMP2
    #endif /* _clsGetBtnKeyCombMP2 */
#endif /* SOMGD_clsGetBtnKeyCombMP2 */

/*
 * New Method: clsSetWheelCount
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetWheelCount(M_AMouse *somSelf, 
		ULONG ulWheelCount);
#pragma linkage(somTP_M_AMouse_clsSetWheelCount, system)
typedef somTP_M_AMouse_clsSetWheelCount *somTD_M_AMouse_clsSetWheelCount;
#define somMD_M_AMouse_clsSetWheelCount "::M_AMouse::clsSetWheelCount"
#define M_AMouse_clsSetWheelCount(somSelf,ulWheelCount) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetWheelCount) \
	(somSelf,ulWheelCount))
#ifndef SOMGD_clsSetWheelCount
    #if (defined(_clsSetWheelCount) || defined(__clsSetWheelCount))
        #undef _clsSetWheelCount
        #undef __clsSetWheelCount
        #define SOMGD_clsSetWheelCount 1
    #else
        #define _clsSetWheelCount M_AMouse_clsSetWheelCount
    #endif /* _clsSetWheelCount */
#endif /* SOMGD_clsSetWheelCount */

/*
 * New Method: clsGetWheelCount
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetWheelCount(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetWheelCount, system)
typedef somTP_M_AMouse_clsGetWheelCount *somTD_M_AMouse_clsGetWheelCount;
#define somMD_M_AMouse_clsGetWheelCount "::M_AMouse::clsGetWheelCount"
#define M_AMouse_clsGetWheelCount(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetWheelCount) \
	(somSelf))
#ifndef SOMGD_clsGetWheelCount
    #if (defined(_clsGetWheelCount) || defined(__clsGetWheelCount))
        #undef _clsGetWheelCount
        #undef __clsGetWheelCount
        #define SOMGD_clsGetWheelCount 1
    #else
        #define _clsGetWheelCount M_AMouse_clsGetWheelCount
    #endif /* _clsGetWheelCount */
#endif /* SOMGD_clsGetWheelCount */

/*
 * New Method: clsSetApplications
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetApplications(M_AMouse *somSelf, 
		STRUCTAPPL* pstructApplications);
#pragma linkage(somTP_M_AMouse_clsSetApplications, system)
typedef somTP_M_AMouse_clsSetApplications *somTD_M_AMouse_clsSetApplications;
#define somMD_M_AMouse_clsSetApplications "::M_AMouse::clsSetApplications"
#define M_AMouse_clsSetApplications(somSelf,pstructApplications) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetApplications) \
	(somSelf,pstructApplications))
#ifndef SOMGD_clsSetApplications
    #if (defined(_clsSetApplications) || defined(__clsSetApplications))
        #undef _clsSetApplications
        #undef __clsSetApplications
        #define SOMGD_clsSetApplications 1
    #else
        #define _clsSetApplications M_AMouse_clsSetApplications
    #endif /* _clsSetApplications */
#endif /* SOMGD_clsSetApplications */

/*
 * New Method: clsGetApplications
 */
typedef STRUCTAPPL*   SOMLINK somTP_M_AMouse_clsGetApplications(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetApplications, system)
typedef somTP_M_AMouse_clsGetApplications *somTD_M_AMouse_clsGetApplications;
#define somMD_M_AMouse_clsGetApplications "::M_AMouse::clsGetApplications"
#define M_AMouse_clsGetApplications(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetApplications) \
	(somSelf))
#ifndef SOMGD_clsGetApplications
    #if (defined(_clsGetApplications) || defined(__clsGetApplications))
        #undef _clsGetApplications
        #undef __clsGetApplications
        #define SOMGD_clsGetApplications 1
    #else
        #define _clsGetApplications M_AMouse_clsGetApplications
    #endif /* _clsGetApplications */
#endif /* SOMGD_clsGetApplications */

/*
 * New Method: clsSetPMCtlsFlags
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetPMCtlsFlags(M_AMouse *somSelf, 
		ULONG ulFlgPmCtls);
#pragma linkage(somTP_M_AMouse_clsSetPMCtlsFlags, system)
typedef somTP_M_AMouse_clsSetPMCtlsFlags *somTD_M_AMouse_clsSetPMCtlsFlags;
#define somMD_M_AMouse_clsSetPMCtlsFlags "::M_AMouse::clsSetPMCtlsFlags"
#define M_AMouse_clsSetPMCtlsFlags(somSelf,ulFlgPmCtls) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetPMCtlsFlags) \
	(somSelf,ulFlgPmCtls))
#ifndef SOMGD_clsSetPMCtlsFlags
    #if (defined(_clsSetPMCtlsFlags) || defined(__clsSetPMCtlsFlags))
        #undef _clsSetPMCtlsFlags
        #undef __clsSetPMCtlsFlags
        #define SOMGD_clsSetPMCtlsFlags 1
    #else
        #define _clsSetPMCtlsFlags M_AMouse_clsSetPMCtlsFlags
    #endif /* _clsSetPMCtlsFlags */
#endif /* SOMGD_clsSetPMCtlsFlags */

/*
 * New Method: clsGetPMCtlsFlags
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetPMCtlsFlags(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetPMCtlsFlags, system)
typedef somTP_M_AMouse_clsGetPMCtlsFlags *somTD_M_AMouse_clsGetPMCtlsFlags;
#define somMD_M_AMouse_clsGetPMCtlsFlags "::M_AMouse::clsGetPMCtlsFlags"
#define M_AMouse_clsGetPMCtlsFlags(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetPMCtlsFlags) \
	(somSelf))
#ifndef SOMGD_clsGetPMCtlsFlags
    #if (defined(_clsGetPMCtlsFlags) || defined(__clsGetPMCtlsFlags))
        #undef _clsGetPMCtlsFlags
        #undef __clsGetPMCtlsFlags
        #define SOMGD_clsGetPMCtlsFlags 1
    #else
        #define _clsGetPMCtlsFlags M_AMouse_clsGetPMCtlsFlags
    #endif /* _clsGetPMCtlsFlags */
#endif /* SOMGD_clsGetPMCtlsFlags */

/*
 * New Method: clsSetSmartCruise
 */
typedef void   SOMLINK somTP_M_AMouse_clsSetSmartCruise(M_AMouse *somSelf, 
		ULONG ulSmartCruise);
#pragma linkage(somTP_M_AMouse_clsSetSmartCruise, system)
typedef somTP_M_AMouse_clsSetSmartCruise *somTD_M_AMouse_clsSetSmartCruise;
#define somMD_M_AMouse_clsSetSmartCruise "::M_AMouse::clsSetSmartCruise"
#define M_AMouse_clsSetSmartCruise(somSelf,ulSmartCruise) \
    (SOM_Resolve(somSelf, M_AMouse, clsSetSmartCruise) \
	(somSelf,ulSmartCruise))
#ifndef SOMGD_clsSetSmartCruise
    #if (defined(_clsSetSmartCruise) || defined(__clsSetSmartCruise))
        #undef _clsSetSmartCruise
        #undef __clsSetSmartCruise
        #define SOMGD_clsSetSmartCruise 1
    #else
        #define _clsSetSmartCruise M_AMouse_clsSetSmartCruise
    #endif /* _clsSetSmartCruise */
#endif /* SOMGD_clsSetSmartCruise */

/*
 * New Method: clsGetSmartCruise
 */
typedef ULONG   SOMLINK somTP_M_AMouse_clsGetSmartCruise(M_AMouse *somSelf);
#pragma linkage(somTP_M_AMouse_clsGetSmartCruise, system)
typedef somTP_M_AMouse_clsGetSmartCruise *somTD_M_AMouse_clsGetSmartCruise;
#define somMD_M_AMouse_clsGetSmartCruise "::M_AMouse::clsGetSmartCruise"
#define M_AMouse_clsGetSmartCruise(somSelf) \
    (SOM_Resolve(somSelf, M_AMouse, clsGetSmartCruise) \
	(somSelf))
#ifndef SOMGD_clsGetSmartCruise
    #if (defined(_clsGetSmartCruise) || defined(__clsGetSmartCruise))
        #undef _clsGetSmartCruise
        #undef __clsGetSmartCruise
        #define SOMGD_clsGetSmartCruise 1
    #else
        #define _clsGetSmartCruise M_AMouse_clsGetSmartCruise
    #endif /* _clsGetSmartCruise */
#endif /* SOMGD_clsGetSmartCruise */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define M_AMouse_wpclsQueryTitle M_WPObject_wpclsQueryTitle
#define M_AMouse_wpclsQueryStyle M_WPObject_wpclsQueryStyle
#define M_AMouse_wpclsQueryIconData M_WPObject_wpclsQueryIconData
#define M_AMouse_wpclsQuerySetting M_WPAbstract_wpclsQuerySetting
#define M_AMouse_wpclsSetSetting M_WPAbstract_wpclsSetSetting
#define M_AMouse_wpclsObjectFromHandle M_WPObject_wpclsObjectFromHandle
#define M_AMouse_wpclsCreateDefaultTemplates M_WPObject_wpclsCreateDefaultTemplates
#define M_AMouse_wpclsMakeAwake M_WPObject_wpclsMakeAwake
#define M_AMouse_wpclsNew M_WPObject_wpclsNew
#define M_AMouse_wpclsQueryDetails M_WPObject_wpclsQueryDetails
#define M_AMouse_wpclsQueryDetailsInfo M_WPObject_wpclsQueryDetailsInfo
#define M_AMouse_wpclsQueryExtendedCriteria M_WPObject_wpclsQueryExtendedCriteria
#define M_AMouse_wpclsQueryFolder M_WPObject_wpclsQueryFolder
#define M_AMouse_wpclsQuerySearchInfo M_WPObject_wpclsQuerySearchInfo
#define M_AMouse_wpclsFindObjectFirst M_WPObject_wpclsFindObjectFirst
#define M_AMouse_wpclsFindObjectNext M_WPObject_wpclsFindObjectNext
#define M_AMouse_wpclsFindObjectEnd M_WPObject_wpclsFindObjectEnd
#define M_AMouse_wpclsSetError M_WPObject_wpclsSetError
#define M_AMouse_wpclsQueryError M_WPObject_wpclsQueryError
#define M_AMouse_wpclsQuerySettingsPageSize M_WPObject_wpclsQuerySettingsPageSize
#define M_AMouse_wpclsQueryObject M_WPObject_wpclsQueryObject
#define M_AMouse_wpclsQueryButtonAppearance M_WPObject_wpclsQueryButtonAppearance
#define M_AMouse_wpclsDecUsage M_WPObject_wpclsDecUsage
#define M_AMouse_wpclsIncUsage M_WPObject_wpclsIncUsage
#define M_AMouse_wpclsInsertMultipleObjects M_WPObject_wpclsInsertMultipleObjects
#define M_AMouse_wpclsFindOneObject M_WPObject_wpclsFindOneObject
#define M_AMouse_wpclsSetSettingsPageSize M_WPObject_wpclsSetSettingsPageSize
#define M_AMouse_wpclsSetIconData M_WPObject_wpclsSetIconData
#define M_AMouse_wpclsSetIcon M_WPObject_wpclsSetIcon
#define M_AMouse_wpclsRemoveObjects M_WPObject_wpclsRemoveObjects
#define M_AMouse_somUninit SOMObject_somUninit
#define M_AMouse_somClassReady SOMClass_somClassReady
#define M_AMouse_somNew SOMClass_somNew
#define M_AMouse_somRenew SOMClass_somRenew
#define M_AMouse__get_somDataAlignment SOMClass__get_somDataAlignment
#define M_AMouse__get_somInstanceDataOffsets SOMClass__get_somInstanceDataOffsets
#define M_AMouse__get_somDirectInitClasses SOMClass__get_somDirectInitClasses
#define M_AMouse_somNewNoInit SOMClass_somNewNoInit
#define M_AMouse_somRenewNoInit SOMClass_somRenewNoInit
#define M_AMouse_somRenewNoZero SOMClass_somRenewNoZero
#define M_AMouse_somRenewNoInitNoZero SOMClass_somRenewNoInitNoZero
#define M_AMouse_somAllocate SOMClass_somAllocate
#define M_AMouse_somDeallocate SOMClass_somDeallocate
#define M_AMouse_somInitClass SOMClass_somInitClass
#define M_AMouse_somInitMIClass SOMClass_somInitMIClass
#define M_AMouse_somAddStaticMethod SOMClass_somAddStaticMethod
#define M_AMouse_somAddDynamicMethod SOMClass_somAddDynamicMethod
#define M_AMouse_somOverrideSMethod SOMClass_somOverrideSMethod
#define M_AMouse_somGetApplyStub SOMClass_somGetApplyStub
#define M_AMouse_somGetClassData SOMClass_somGetClassData
#define M_AMouse_somSetClassData SOMClass_somSetClassData
#define M_AMouse_somGetClassMtab SOMClass_somGetClassMtab
#define M_AMouse_somGetInstanceOffset SOMClass_somGetInstanceOffset
#define M_AMouse_somGetInstancePartSize SOMClass_somGetInstancePartSize
#define M_AMouse_somGetInstanceSize SOMClass_somGetInstanceSize
#define M_AMouse_somGetInstanceToken SOMClass_somGetInstanceToken
#define M_AMouse_somGetMemberToken SOMClass_somGetMemberToken
#define M_AMouse_somGetMethodData SOMClass_somGetMethodData
#define M_AMouse_somGetRdStub SOMClass_somGetRdStub
#define M_AMouse_somGetMethodDescriptor SOMClass_somGetMethodDescriptor
#define M_AMouse_somGetMethodIndex SOMClass_somGetMethodIndex
#define M_AMouse_somGetMethodToken SOMClass_somGetMethodToken
#define M_AMouse_somGetName SOMClass_somGetName
#define M_AMouse_somGetNthMethodData SOMClass_somGetNthMethodData
#define M_AMouse_somGetNthMethodInfo SOMClass_somGetNthMethodInfo
#define M_AMouse_somGetNumMethods SOMClass_somGetNumMethods
#define M_AMouse_somGetNumStaticMethods SOMClass_somGetNumStaticMethods
#define M_AMouse_somGetParent SOMClass_somGetParent
#define M_AMouse_somGetParents SOMClass_somGetParents
#define M_AMouse_somGetVersionNumbers SOMClass_somGetVersionNumbers
#define M_AMouse_somFindMethod SOMClass_somFindMethod
#define M_AMouse_somFindMethodOk SOMClass_somFindMethodOk
#define M_AMouse_somFindSMethod SOMClass_somFindSMethod
#define M_AMouse_somFindSMethodOk SOMClass_somFindSMethodOk
#define M_AMouse_somLookupMethod SOMClass_somLookupMethod
#define M_AMouse_somCheckVersion SOMClass_somCheckVersion
#define M_AMouse_somDescendedFrom SOMClass_somDescendedFrom
#define M_AMouse_somSupportsMethod SOMClass_somSupportsMethod
#define M_AMouse_somDefinedMethod SOMClass_somDefinedMethod
#define M_AMouse_somOverrideMtab SOMClass_somOverrideMtab
#define M_AMouse_somDefaultInit SOMObject_somDefaultInit
#define M_AMouse_somDestruct SOMObject_somDestruct
#define M_AMouse_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define M_AMouse_somDefaultAssign SOMObject_somDefaultAssign
#define M_AMouse_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define M_AMouse_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define M_AMouse_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define M_AMouse_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define M_AMouse_somDefaultVAssign SOMObject_somDefaultVAssign
#define M_AMouse_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define M_AMouse_somInit SOMObject_somInit
#define M_AMouse_somFree SOMObject_somFree
#define M_AMouse_somGetClass SOMObject_somGetClass
#define M_AMouse_somGetClassName SOMObject_somGetClassName
#define M_AMouse_somGetSize SOMObject_somGetSize
#define M_AMouse_somIsA SOMObject_somIsA
#define M_AMouse_somIsInstanceOf SOMObject_somIsInstanceOf
#define M_AMouse_somRespondsTo SOMObject_somRespondsTo
#define M_AMouse_somDispatch SOMObject_somDispatch
#define M_AMouse_somClassDispatch SOMObject_somClassDispatch
#define M_AMouse_somCastObj SOMObject_somCastObj
#define M_AMouse_somResetObj SOMObject_somResetObj
#define M_AMouse_somDispatchV SOMObject_somDispatchV
#define M_AMouse_somDispatchL SOMObject_somDispatchL
#define M_AMouse_somDispatchA SOMObject_somDispatchA
#define M_AMouse_somDispatchD SOMObject_somDispatchD
#define M_AMouse_somPrintSelf SOMObject_somPrintSelf
#define M_AMouse_somDumpSelf SOMObject_somDumpSelf
#define M_AMouse_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_M_AMouse_h */
