
/*
 * This file was generated by the SOM Compiler.
 * FileName: .\AMouse.ih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitih: 2.47
 */

/*
 * 
 * PROGRAMMNAME: AMOUSE
 * 
 * 
 * VERSION: 2.80
 * 
 * 
 * MODULNAME: AMOUSE.IDL
 * 
 * 
 * BESCHREIBUNG:
 * 
 *   idl file for AMouse class: mouse settings program derived from standard
 *   OS/2 WPMouse class
 * 
 *  Ver.    Date      Comment
 * 
 *  1.00    20-02-00  First release
 *  2.00    06-16-01  WheelThread in separate process
 *  2.10    05-12-02  Handling of shift-keys
 *  2.20    10-03-02  USB support added
 *  2.40    02-01-03  support for 2 wheels; wildcards for process name
 *  2.50    04-20-03  application behaviour support added
 *  2.60    06-13-04  remove unused settings pages from mouse object
 *  2.70    10-23-04  support for 7 buttons added
 *  2.80    10-02-06  support of arbitary key combinations
 * 
 *  Copyright (C) noller & breining software 2001...2006
 * 
 *  =====================================================================#
 *                                                                       #
 *   CLASS: AMouse                                                       #
 *                                                                       #
 *   CLASS HIERARCHY:                                                    #
 *                                                                       #
 *       SOMObject                                                       #
 *         ÀÄÄ WPObject                                                  #
 *               ÀÄÄ WPAbstract                                          #
 *                     ÀÄÄ WPMouse                                       #
 *                           ÀÄÄ AMouse                                  #
 *                                                                       #
 *  =====================================================================#
 */


/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_AMouse_ih
#define SOM_AMouse_ih

#pragma info(none)

/*
 * Passthru lines: File: "C.ih", "before"
 */

/* General constants */
#define RESOURCE_MODULE           "AMOUSE"
#define AMOUSE_HELPFILE           "AMOUSEWP.HLP"    /* Help file */
#define BUFFERSIZE                  256

#define NUM_DEVICETYPES           10

/* Suppression of 'unused parameter' warning */
#define USE_SOMSELF somSelf = somSelf;


#include <AMouse.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
  #define SOM_Scope extern "C"
#else
  #define SOM_Scope extern
#endif  /* __cplusplus */
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass AMouseCClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define AMouse_MaxNoMethods 9

/*
 * -- Instance data
 */
typedef struct {
	PSZ pszMyRealName;
	USEITEM aboutUseItem;
	VIEWITEM aboutViewItem;
} AMouseData;

/*
 * GetData macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef AMouseData* SOMLINK somTP_AMouse_DataThunk(void*);
#ifdef __IBMC__
#pragma linkage(somTP_AMouse_DataThunk, system)
#endif
typedef somTP_AMouse_DataThunk *somTD_AMouse_DataThunk;

#define AMouseGetData(somSelf) \
   (((somTD_AMouse_DataThunk)(AMouseCClassData.instanceDataToken))(somSelf))

/*
 * Instance variable and staticdata access macros
 */
#ifndef NO_VARIABLE_MACROS
#define _pszMyRealName (somThis->pszMyRealName)
#define _aboutUseItem (somThis->aboutUseItem)
#define _aboutViewItem (somThis->aboutViewItem)
#endif

/*
 * Primary Implementation File Support
 */
#if (defined(AMouse_Class_Source) || defined(SOM_Module_amouse_Source))

/*
 * Trace/Debug macro
 */
#ifndef AMouseMethodDebug
   #define AMouseMethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* AMouseMethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_AMouseCClassData.parentMtab
#undef SOMInstance
#define SOMInstance AMouseCClassData.parentMtab

#ifndef M_AMouse_Class_Source
   #define M_AMouse_Class_Source
#endif    /* M_AMouse_Class_Source */

/*
 * Overridden method: wpAddMouseTimingPage
 */
#pragma linkage(AMouseX_wpAddMouseTimingPage, system)
SOM_Scope ULONG  SOMLINK AMouseX_wpAddMouseTimingPage(AMouse *somSelf,
		HWND hwndNotebook);
static char *somMN_AMousewpAddMouseTimingPage = "WPMouse::wpAddMouseTimingPage";
static somId somId_AMousewpAddMouseTimingPage = &somMN_AMousewpAddMouseTimingPage;
#ifdef somId_wpAddMouseTimingPage
#undef somId_wpAddMouseTimingPage
#else
#define somId_wpAddMouseTimingPage somId_AMousewpAddMouseTimingPage
#endif
static somMethodProc* AMouse_parent_WPMouse_wpAddMouseTimingPage_resolved;
#define AMouse_parent_WPMouse_wpAddMouseTimingPage(somSelf,hwndNotebook) \
  ((( somTD_WPMouse_wpAddMouseTimingPage ) \
    AMouse_parent_WPMouse_wpAddMouseTimingPage_resolved) \
	 (somSelf,hwndNotebook))
#ifndef SOMGD_pmc_WPMouse_wpAddMouseTimingPage
  #ifdef parent_WPMouse_wpAddMouseTimingPage
     #undef parent_WPMouse_wpAddMouseTimingPage
     #define SOMGD_pmc_WPMouse_wpAddMouseTimingPage 1
  #else
     #define parent_WPMouse_wpAddMouseTimingPage AMouse_parent_WPMouse_wpAddMouseTimingPage
  #endif /* parent_WPMouse_wpAddMouseTimingPage */
#endif /* SOMGD_pmc_WPMouse_wpAddMouseTimingPage */
#ifndef parent_wpAddMouseTimingPage
     #define parent_wpAddMouseTimingPage AMouse_parent_WPMouse_wpAddMouseTimingPage
#endif  /* parent_wpAddMouseTimingPage */
#define AMouse_parents_wpAddMouseTimingPage(somSelf,hwndNotebook) (\
   AMouse_parent_WPMouse_wpAddMouseTimingPage(somSelf,hwndNotebook))

/*
 * Overridden method: wpAddMouseMappingsPage
 */
#pragma linkage(AMouseX_wpAddMouseMappingsPage, system)
SOM_Scope ULONG  SOMLINK AMouseX_wpAddMouseMappingsPage(AMouse *somSelf,
		HWND hwndNotebook);
static char *somMN_AMousewpAddMouseMappingsPage = "WPMouse::wpAddMouseMappingsPage";
static somId somId_AMousewpAddMouseMappingsPage = &somMN_AMousewpAddMouseMappingsPage;
#ifdef somId_wpAddMouseMappingsPage
#undef somId_wpAddMouseMappingsPage
#else
#define somId_wpAddMouseMappingsPage somId_AMousewpAddMouseMappingsPage
#endif
static somMethodProc* AMouse_parent_WPMouse_wpAddMouseMappingsPage_resolved;
#define AMouse_parent_WPMouse_wpAddMouseMappingsPage(somSelf,hwndNotebook) \
  ((( somTD_WPMouse_wpAddMouseMappingsPage ) \
    AMouse_parent_WPMouse_wpAddMouseMappingsPage_resolved) \
	 (somSelf,hwndNotebook))
#ifndef SOMGD_pmc_WPMouse_wpAddMouseMappingsPage
  #ifdef parent_WPMouse_wpAddMouseMappingsPage
     #undef parent_WPMouse_wpAddMouseMappingsPage
     #define SOMGD_pmc_WPMouse_wpAddMouseMappingsPage 1
  #else
     #define parent_WPMouse_wpAddMouseMappingsPage AMouse_parent_WPMouse_wpAddMouseMappingsPage
  #endif /* parent_WPMouse_wpAddMouseMappingsPage */
#endif /* SOMGD_pmc_WPMouse_wpAddMouseMappingsPage */
#ifndef parent_wpAddMouseMappingsPage
     #define parent_wpAddMouseMappingsPage AMouse_parent_WPMouse_wpAddMouseMappingsPage
#endif  /* parent_wpAddMouseMappingsPage */
#define AMouse_parents_wpAddMouseMappingsPage(somSelf,hwndNotebook) (\
   AMouse_parent_WPMouse_wpAddMouseMappingsPage(somSelf,hwndNotebook))

/*
 * Overridden method: wpAddSettingsPages
 */
#pragma linkage(AMouseX_wpAddSettingsPages, system)
SOM_Scope BOOL  SOMLINK AMouseX_wpAddSettingsPages(AMouse *somSelf,
		HWND hwndNotebook);
static char *somMN_AMousewpAddSettingsPages = "WPObject::wpAddSettingsPages";
static somId somId_AMousewpAddSettingsPages = &somMN_AMousewpAddSettingsPages;
#ifdef somId_wpAddSettingsPages
#undef somId_wpAddSettingsPages
#else
#define somId_wpAddSettingsPages somId_AMousewpAddSettingsPages
#endif
static somMethodProc* AMouse_parent_WPMouse_wpAddSettingsPages_resolved;
#define AMouse_parent_WPMouse_wpAddSettingsPages(somSelf,hwndNotebook) \
  ((( somTD_WPObject_wpAddSettingsPages ) \
    AMouse_parent_WPMouse_wpAddSettingsPages_resolved) \
	 (somSelf,hwndNotebook))
#ifndef SOMGD_pmc_WPMouse_wpAddSettingsPages
  #ifdef parent_WPMouse_wpAddSettingsPages
     #undef parent_WPMouse_wpAddSettingsPages
     #define SOMGD_pmc_WPMouse_wpAddSettingsPages 1
  #else
     #define parent_WPMouse_wpAddSettingsPages AMouse_parent_WPMouse_wpAddSettingsPages
  #endif /* parent_WPMouse_wpAddSettingsPages */
#endif /* SOMGD_pmc_WPMouse_wpAddSettingsPages */
#ifndef parent_wpAddSettingsPages
     #define parent_wpAddSettingsPages AMouse_parent_WPMouse_wpAddSettingsPages
#endif  /* parent_wpAddSettingsPages */
#define AMouse_parents_wpAddSettingsPages(somSelf,hwndNotebook) (\
   AMouse_parent_WPMouse_wpAddSettingsPages(somSelf,hwndNotebook))

/*
 * Overridden method: wpModifyPopupMenu
 */
#pragma linkage(AMouseX_wpModifyPopupMenu, system)
SOM_Scope BOOL  SOMLINK AMouseX_wpModifyPopupMenu(AMouse *somSelf,
		HWND hwndMenu,
		HWND hwndCnr,
		ULONG iPosition);
static char *somMN_AMousewpModifyPopupMenu = "WPObject::wpModifyPopupMenu";
static somId somId_AMousewpModifyPopupMenu = &somMN_AMousewpModifyPopupMenu;
#ifdef somId_wpModifyPopupMenu
#undef somId_wpModifyPopupMenu
#else
#define somId_wpModifyPopupMenu somId_AMousewpModifyPopupMenu
#endif
static somMethodProc* AMouse_parent_WPMouse_wpModifyPopupMenu_resolved;
#define AMouse_parent_WPMouse_wpModifyPopupMenu(somSelf,hwndMenu,hwndCnr,iPosition) \
  ((( somTD_WPObject_wpModifyPopupMenu ) \
    AMouse_parent_WPMouse_wpModifyPopupMenu_resolved) \
	 (somSelf,hwndMenu,hwndCnr,iPosition))
#ifndef SOMGD_pmc_WPMouse_wpModifyPopupMenu
  #ifdef parent_WPMouse_wpModifyPopupMenu
     #undef parent_WPMouse_wpModifyPopupMenu
     #define SOMGD_pmc_WPMouse_wpModifyPopupMenu 1
  #else
     #define parent_WPMouse_wpModifyPopupMenu AMouse_parent_WPMouse_wpModifyPopupMenu
  #endif /* parent_WPMouse_wpModifyPopupMenu */
#endif /* SOMGD_pmc_WPMouse_wpModifyPopupMenu */
#ifndef parent_wpModifyPopupMenu
     #define parent_wpModifyPopupMenu AMouse_parent_WPMouse_wpModifyPopupMenu
#endif  /* parent_wpModifyPopupMenu */
#define AMouse_parents_wpModifyPopupMenu(somSelf,hwndMenu,hwndCnr,iPosition) (\
   AMouse_parent_WPMouse_wpModifyPopupMenu(somSelf,hwndMenu,hwndCnr,iPosition))

/*
 * Overridden method: wpFilterPopupMenu
 */
#pragma linkage(AMouseX_wpFilterPopupMenu, system)
SOM_Scope ULONG  SOMLINK AMouseX_wpFilterPopupMenu(AMouse *somSelf,
		ULONG ulFlags,
		HWND hwndCnr,
		BOOL fMultiSelect);
static char *somMN_AMousewpFilterPopupMenu = "WPObject::wpFilterPopupMenu";
static somId somId_AMousewpFilterPopupMenu = &somMN_AMousewpFilterPopupMenu;
#ifdef somId_wpFilterPopupMenu
#undef somId_wpFilterPopupMenu
#else
#define somId_wpFilterPopupMenu somId_AMousewpFilterPopupMenu
#endif
static somMethodProc* AMouse_parent_WPMouse_wpFilterPopupMenu_resolved;
#define AMouse_parent_WPMouse_wpFilterPopupMenu(somSelf,ulFlags,hwndCnr,fMultiSelect) \
  ((( somTD_WPObject_wpFilterPopupMenu ) \
    AMouse_parent_WPMouse_wpFilterPopupMenu_resolved) \
	 (somSelf,ulFlags,hwndCnr,fMultiSelect))
#ifndef SOMGD_pmc_WPMouse_wpFilterPopupMenu
  #ifdef parent_WPMouse_wpFilterPopupMenu
     #undef parent_WPMouse_wpFilterPopupMenu
     #define SOMGD_pmc_WPMouse_wpFilterPopupMenu 1
  #else
     #define parent_WPMouse_wpFilterPopupMenu AMouse_parent_WPMouse_wpFilterPopupMenu
  #endif /* parent_WPMouse_wpFilterPopupMenu */
#endif /* SOMGD_pmc_WPMouse_wpFilterPopupMenu */
#ifndef parent_wpFilterPopupMenu
     #define parent_wpFilterPopupMenu AMouse_parent_WPMouse_wpFilterPopupMenu
#endif  /* parent_wpFilterPopupMenu */
#define AMouse_parents_wpFilterPopupMenu(somSelf,ulFlags,hwndCnr,fMultiSelect) (\
   AMouse_parent_WPMouse_wpFilterPopupMenu(somSelf,ulFlags,hwndCnr,fMultiSelect))

/*
 * Overridden method: wpMenuItemSelected
 */
#pragma linkage(AMouseX_wpMenuItemSelected, system)
SOM_Scope BOOL  SOMLINK AMouseX_wpMenuItemSelected(AMouse *somSelf,
		HWND hwndFrame,
		ULONG ulMenuId);
static char *somMN_AMousewpMenuItemSelected = "WPObject::wpMenuItemSelected";
static somId somId_AMousewpMenuItemSelected = &somMN_AMousewpMenuItemSelected;
#ifdef somId_wpMenuItemSelected
#undef somId_wpMenuItemSelected
#else
#define somId_wpMenuItemSelected somId_AMousewpMenuItemSelected
#endif
static somMethodProc* AMouse_parent_WPMouse_wpMenuItemSelected_resolved;
#define AMouse_parent_WPMouse_wpMenuItemSelected(somSelf,hwndFrame,ulMenuId) \
  ((( somTD_WPObject_wpMenuItemSelected ) \
    AMouse_parent_WPMouse_wpMenuItemSelected_resolved) \
	 (somSelf,hwndFrame,ulMenuId))
#ifndef SOMGD_pmc_WPMouse_wpMenuItemSelected
  #ifdef parent_WPMouse_wpMenuItemSelected
     #undef parent_WPMouse_wpMenuItemSelected
     #define SOMGD_pmc_WPMouse_wpMenuItemSelected 1
  #else
     #define parent_WPMouse_wpMenuItemSelected AMouse_parent_WPMouse_wpMenuItemSelected
  #endif /* parent_WPMouse_wpMenuItemSelected */
#endif /* SOMGD_pmc_WPMouse_wpMenuItemSelected */
#ifndef parent_wpMenuItemSelected
     #define parent_wpMenuItemSelected AMouse_parent_WPMouse_wpMenuItemSelected
#endif  /* parent_wpMenuItemSelected */
#define AMouse_parents_wpMenuItemSelected(somSelf,hwndFrame,ulMenuId) (\
   AMouse_parent_WPMouse_wpMenuItemSelected(somSelf,hwndFrame,ulMenuId))

/*
 * Overridden method: wpOpen
 */
#pragma linkage(AMouseX_wpOpen, system)
SOM_Scope HWND  SOMLINK AMouseX_wpOpen(AMouse *somSelf,
		HWND hwndCnr,
		ULONG ulView,
		ULONG param);
static char *somMN_AMousewpOpen = "WPObject::wpOpen";
static somId somId_AMousewpOpen = &somMN_AMousewpOpen;
#ifdef somId_wpOpen
#undef somId_wpOpen
#else
#define somId_wpOpen somId_AMousewpOpen
#endif
static somMethodProc* AMouse_parent_WPMouse_wpOpen_resolved;
#define AMouse_parent_WPMouse_wpOpen(somSelf,hwndCnr,ulView,param) \
  ((( somTD_WPObject_wpOpen ) \
    AMouse_parent_WPMouse_wpOpen_resolved) \
	 (somSelf,hwndCnr,ulView,param))
#ifndef SOMGD_pmc_WPMouse_wpOpen
  #ifdef parent_WPMouse_wpOpen
     #undef parent_WPMouse_wpOpen
     #define SOMGD_pmc_WPMouse_wpOpen 1
  #else
     #define parent_WPMouse_wpOpen AMouse_parent_WPMouse_wpOpen
  #endif /* parent_WPMouse_wpOpen */
#endif /* SOMGD_pmc_WPMouse_wpOpen */
#ifndef parent_wpOpen
     #define parent_wpOpen AMouse_parent_WPMouse_wpOpen
#endif  /* parent_wpOpen */
#define AMouse_parents_wpOpen(somSelf,hwndCnr,ulView,param) (\
   AMouse_parent_WPMouse_wpOpen(somSelf,hwndCnr,ulView,param))

/*
 * Overridden method: wpSetup
 */
#pragma linkage(AMouseX_wpSetup, system)
SOM_Scope BOOL  SOMLINK AMouseX_wpSetup(AMouse *somSelf,
		PSZ pszSetupString);
static char *somMN_AMousewpSetup = "WPObject::wpSetup";
static somId somId_AMousewpSetup = &somMN_AMousewpSetup;
#ifdef somId_wpSetup
#undef somId_wpSetup
#else
#define somId_wpSetup somId_AMousewpSetup
#endif
static somMethodProc* AMouse_parent_WPMouse_wpSetup_resolved;
#define AMouse_parent_WPMouse_wpSetup(somSelf,pszSetupString) \
  ((( somTD_WPObject_wpSetup ) \
    AMouse_parent_WPMouse_wpSetup_resolved) \
	 (somSelf,pszSetupString))
#ifndef SOMGD_pmc_WPMouse_wpSetup
  #ifdef parent_WPMouse_wpSetup
     #undef parent_WPMouse_wpSetup
     #define SOMGD_pmc_WPMouse_wpSetup 1
  #else
     #define parent_WPMouse_wpSetup AMouse_parent_WPMouse_wpSetup
  #endif /* parent_WPMouse_wpSetup */
#endif /* SOMGD_pmc_WPMouse_wpSetup */
#ifndef parent_wpSetup
     #define parent_wpSetup AMouse_parent_WPMouse_wpSetup
#endif  /* parent_wpSetup */
#define AMouse_parents_wpSetup(somSelf,pszSetupString) (\
   AMouse_parent_WPMouse_wpSetup(somSelf,pszSetupString))

/*
 * Initialize the class data structure
 */
SOMEXTERN struct AMouseClassDataStructure SOMDLINK AMouseClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct AMouseCClassDataStructure SOMDLINK AMouseCClassData = {(somMethodTabs) NULL};

/*
 * New Method: AddDeviceInfoPage
 */
#pragma linkage(AMouseX_AddDeviceInfoPage, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddDeviceInfoPage(AMouse *somSelf,
		HWND hwndNotebook);
/*
 *  METHOD: AddDeviceInfoPage                              ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddDeviceInfoPage_defined
#define somMN_AddDeviceInfoPage_defined
static char *somMN_AddDeviceInfoPage = "AddDeviceInfoPage";
static somId somId_AddDeviceInfoPage = &somMN_AddDeviceInfoPage;
#endif  /* somMN_AddDeviceInfoPage_defined */
#ifndef somDS_AMouseX_AddDeviceInfoPage_defined
#define somDS_AMouseX_AddDeviceInfoPage_defined
static char *somDS_AMouseX_AddDeviceInfoPage = "::AMouse::AddDeviceInfoPage";
static somId somDI_AMouseX_AddDeviceInfoPage = &somDS_AMouseX_AddDeviceInfoPage;
#endif  /* somDS_AMouseX_AddDeviceInfoPage_defined */
#define AddDeviceInfoPage_somApRdDefault

/*
 * New Method: AddWlDeviceInfoPage
 */
#pragma linkage(AMouseX_AddWlDeviceInfoPage, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddWlDeviceInfoPage(AMouse *somSelf,
		HWND hwndNotebook);
/*
 *  METHOD: AddWlDeviceInfoPage                            ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the wireless device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddWlDeviceInfoPage_defined
#define somMN_AddWlDeviceInfoPage_defined
static char *somMN_AddWlDeviceInfoPage = "AddWlDeviceInfoPage";
static somId somId_AddWlDeviceInfoPage = &somMN_AddWlDeviceInfoPage;
#endif  /* somMN_AddWlDeviceInfoPage_defined */
#ifndef somDS_AMouseX_AddWlDeviceInfoPage_defined
#define somDS_AMouseX_AddWlDeviceInfoPage_defined
static char *somDS_AMouseX_AddWlDeviceInfoPage = "::AMouse::AddWlDeviceInfoPage";
static somId somDI_AMouseX_AddWlDeviceInfoPage = &somDS_AMouseX_AddWlDeviceInfoPage;
#endif  /* somDS_AMouseX_AddWlDeviceInfoPage_defined */
#define AddWlDeviceInfoPage_somApRdDefault

/*
 * New Method: AddWheelSettings1Page
 */
#pragma linkage(AMouseX_AddWheelSettings1Page, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddWheelSettings1Page(AMouse *somSelf,
		ULONG ulWheelPageType,
		HWND hwndNotebook);
/*
 *  METHOD: AddWheelSettings1Page                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddWheelSettings1Page_defined
#define somMN_AddWheelSettings1Page_defined
static char *somMN_AddWheelSettings1Page = "AddWheelSettings1Page";
static somId somId_AddWheelSettings1Page = &somMN_AddWheelSettings1Page;
#endif  /* somMN_AddWheelSettings1Page_defined */
#ifndef somDS_AMouseX_AddWheelSettings1Page_defined
#define somDS_AMouseX_AddWheelSettings1Page_defined
static char *somDS_AMouseX_AddWheelSettings1Page = "::AMouse::AddWheelSettings1Page";
static somId somDI_AMouseX_AddWheelSettings1Page = &somDS_AMouseX_AddWheelSettings1Page;
#endif  /* somDS_AMouseX_AddWheelSettings1Page_defined */
#define AddWheelSettings1Page_somApRdDefault

/*
 * New Method: AddWheelSettings2Page
 */
#pragma linkage(AMouseX_AddWheelSettings2Page, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddWheelSettings2Page(AMouse *somSelf,
		HWND hwndNotebook);
/*
 *  METHOD: AddWheelSettings2Page                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddWheelSettings2Page_defined
#define somMN_AddWheelSettings2Page_defined
static char *somMN_AddWheelSettings2Page = "AddWheelSettings2Page";
static somId somId_AddWheelSettings2Page = &somMN_AddWheelSettings2Page;
#endif  /* somMN_AddWheelSettings2Page_defined */
#ifndef somDS_AMouseX_AddWheelSettings2Page_defined
#define somDS_AMouseX_AddWheelSettings2Page_defined
static char *somDS_AMouseX_AddWheelSettings2Page = "::AMouse::AddWheelSettings2Page";
static somId somDI_AMouseX_AddWheelSettings2Page = &somDS_AMouseX_AddWheelSettings2Page;
#endif  /* somDS_AMouseX_AddWheelSettings2Page_defined */
#define AddWheelSettings2Page_somApRdDefault

/*
 * New Method: AddWheelSettings3Page
 */
#pragma linkage(AMouseX_AddWheelSettings3Page, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddWheelSettings3Page(AMouse *somSelf,
		HWND hwndNotebook);
/*
 *  METHOD: AddWheelSettings3Page                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the device info page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddWheelSettings3Page_defined
#define somMN_AddWheelSettings3Page_defined
static char *somMN_AddWheelSettings3Page = "AddWheelSettings3Page";
static somId somId_AddWheelSettings3Page = &somMN_AddWheelSettings3Page;
#endif  /* somMN_AddWheelSettings3Page_defined */
#ifndef somDS_AMouseX_AddWheelSettings3Page_defined
#define somDS_AMouseX_AddWheelSettings3Page_defined
static char *somDS_AMouseX_AddWheelSettings3Page = "::AMouse::AddWheelSettings3Page";
static somId somDI_AMouseX_AddWheelSettings3Page = &somDS_AMouseX_AddWheelSettings3Page;
#endif  /* somDS_AMouseX_AddWheelSettings3Page_defined */
#define AddWheelSettings3Page_somApRdDefault

/*
 * New Method: AddKeySettings1Page
 */
#pragma linkage(AMouseX_AddKeySettings1Page, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddKeySettings1Page(AMouse *somSelf,
		ULONG ulBtnPageType,
		HWND hwndNotebook);
/*
 *  METHOD: AddKeySettings1Page                            ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the key setings 1 page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddKeySettings1Page_defined
#define somMN_AddKeySettings1Page_defined
static char *somMN_AddKeySettings1Page = "AddKeySettings1Page";
static somId somId_AddKeySettings1Page = &somMN_AddKeySettings1Page;
#endif  /* somMN_AddKeySettings1Page_defined */
#ifndef somDS_AMouseX_AddKeySettings1Page_defined
#define somDS_AMouseX_AddKeySettings1Page_defined
static char *somDS_AMouseX_AddKeySettings1Page = "::AMouse::AddKeySettings1Page";
static somId somDI_AMouseX_AddKeySettings1Page = &somDS_AMouseX_AddKeySettings1Page;
#endif  /* somDS_AMouseX_AddKeySettings1Page_defined */
#define AddKeySettings1Page_somApRdDefault

/*
 * New Method: AddKeySettings2Page
 */
#pragma linkage(AMouseX_AddKeySettings2Page, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddKeySettings2Page(AMouse *somSelf,
		HWND hwndNotebook);
/*
 *  METHOD: AddKeySettings2Page                            ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the key settings 2 page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddKeySettings2Page_defined
#define somMN_AddKeySettings2Page_defined
static char *somMN_AddKeySettings2Page = "AddKeySettings2Page";
static somId somId_AddKeySettings2Page = &somMN_AddKeySettings2Page;
#endif  /* somMN_AddKeySettings2Page_defined */
#ifndef somDS_AMouseX_AddKeySettings2Page_defined
#define somDS_AMouseX_AddKeySettings2Page_defined
static char *somDS_AMouseX_AddKeySettings2Page = "::AMouse::AddKeySettings2Page";
static somId somDI_AMouseX_AddKeySettings2Page = &somDS_AMouseX_AddKeySettings2Page;
#endif  /* somDS_AMouseX_AddKeySettings2Page_defined */
#define AddKeySettings2Page_somApRdDefault

/*
 * New Method: AddTimingSettingsPage
 */
#pragma linkage(AMouseX_AddTimingSettingsPage, system)
SOM_Scope ULONG  SOMLINK AMouseX_AddTimingSettingsPage(AMouse *somSelf,
		HWND hwndNotebook);
/*
 *  METHOD: AddTimingSettingsPage                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method adds the timing page to the settings
 *    notebook.
 * 
 *  RETURN:
 *    0              Unsuccessful
 *    ulPageId       Identifier for the inserted page
 * 
 *  HOW TO OVERRIDE:
 *    Method should always be overridden in order to replace or remove
 *    the device info page from an object which is a descendent of AMouse.
 *    In most cases, an override of this method will not call the parent.
 */
#ifndef somMN_AddTimingSettingsPage_defined
#define somMN_AddTimingSettingsPage_defined
static char *somMN_AddTimingSettingsPage = "AddTimingSettingsPage";
static somId somId_AddTimingSettingsPage = &somMN_AddTimingSettingsPage;
#endif  /* somMN_AddTimingSettingsPage_defined */
#ifndef somDS_AMouseX_AddTimingSettingsPage_defined
#define somDS_AMouseX_AddTimingSettingsPage_defined
static char *somDS_AMouseX_AddTimingSettingsPage = "::AMouse::AddTimingSettingsPage";
static somId somDI_AMouseX_AddTimingSettingsPage = &somDS_AMouseX_AddTimingSettingsPage;
#endif  /* somDS_AMouseX_AddTimingSettingsPage_defined */
#define AddTimingSettingsPage_somApRdDefault

/*
 * New Method: RemoveUnusedMousePage
 */
#pragma linkage(AMouseX_RemoveUnusedMousePage, system)
SOM_Scope ULONG  SOMLINK AMouseX_RemoveUnusedMousePage(AMouse *somSelf,
		HWND hwndNotebook);
/*
 *  METHOD: RemoveUnusedMousePage                          ( ) PRIVATE
 *                                                         (X) PUBLIC
 *  DESCRIPTION:
 *    This method removes unused settings pages from the settings
 *    notebook.
 * 
 *  RETURN:
 *    SETTINGS_PAGE_REMOVED
 */
#ifndef somMN_RemoveUnusedMousePage_defined
#define somMN_RemoveUnusedMousePage_defined
static char *somMN_RemoveUnusedMousePage = "RemoveUnusedMousePage";
static somId somId_RemoveUnusedMousePage = &somMN_RemoveUnusedMousePage;
#endif  /* somMN_RemoveUnusedMousePage_defined */
#ifndef somDS_AMouseX_RemoveUnusedMousePage_defined
#define somDS_AMouseX_RemoveUnusedMousePage_defined
static char *somDS_AMouseX_RemoveUnusedMousePage = "::AMouse::RemoveUnusedMousePage";
static somId somDI_AMouseX_RemoveUnusedMousePage = &somDS_AMouseX_RemoveUnusedMousePage;
#endif  /* somDS_AMouseX_RemoveUnusedMousePage_defined */
#define RemoveUnusedMousePage_somApRdDefault

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t AMouseSM[] = {
    {    &AMouseClassData.AddDeviceInfoPage,
         &somId_AddDeviceInfoPage,
         &somDI_AMouseX_AddDeviceInfoPage,
         (somMethodProc *) AMouseX_AddDeviceInfoPage,
         (somMethodProc *)((void*)-1),
#ifdef AddDeviceInfoPage_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddDeviceInfoPageStubs) },
#endif
    {    &AMouseClassData.AddWlDeviceInfoPage,
         &somId_AddWlDeviceInfoPage,
         &somDI_AMouseX_AddWlDeviceInfoPage,
         (somMethodProc *) AMouseX_AddWlDeviceInfoPage,
         (somMethodProc *)((void*)-1),
#ifdef AddWlDeviceInfoPage_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddWlDeviceInfoPageStubs) },
#endif
    {    &AMouseClassData.AddWheelSettings1Page,
         &somId_AddWheelSettings1Page,
         &somDI_AMouseX_AddWheelSettings1Page,
         (somMethodProc *) AMouseX_AddWheelSettings1Page,
         (somMethodProc *)((void*)-1),
#ifdef AddWheelSettings1Page_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddWheelSettings1PageStubs) },
#endif
    {    &AMouseClassData.AddWheelSettings2Page,
         &somId_AddWheelSettings2Page,
         &somDI_AMouseX_AddWheelSettings2Page,
         (somMethodProc *) AMouseX_AddWheelSettings2Page,
         (somMethodProc *)((void*)-1),
#ifdef AddWheelSettings2Page_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddWheelSettings2PageStubs) },
#endif
    {    &AMouseClassData.AddWheelSettings3Page,
         &somId_AddWheelSettings3Page,
         &somDI_AMouseX_AddWheelSettings3Page,
         (somMethodProc *) AMouseX_AddWheelSettings3Page,
         (somMethodProc *)((void*)-1),
#ifdef AddWheelSettings3Page_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddWheelSettings3PageStubs) },
#endif
    {    &AMouseClassData.AddKeySettings1Page,
         &somId_AddKeySettings1Page,
         &somDI_AMouseX_AddKeySettings1Page,
         (somMethodProc *) AMouseX_AddKeySettings1Page,
         (somMethodProc *)((void*)-1),
#ifdef AddKeySettings1Page_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddKeySettings1PageStubs) },
#endif
    {    &AMouseClassData.AddKeySettings2Page,
         &somId_AddKeySettings2Page,
         &somDI_AMouseX_AddKeySettings2Page,
         (somMethodProc *) AMouseX_AddKeySettings2Page,
         (somMethodProc *)((void*)-1),
#ifdef AddKeySettings2Page_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddKeySettings2PageStubs) },
#endif
    {    &AMouseClassData.AddTimingSettingsPage,
         &somId_AddTimingSettingsPage,
         &somDI_AMouseX_AddTimingSettingsPage,
         (somMethodProc *) AMouseX_AddTimingSettingsPage,
         (somMethodProc *)((void*)-1),
#ifdef AddTimingSettingsPage_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AddTimingSettingsPageStubs) },
#endif
    {    &AMouseClassData.RemoveUnusedMousePage,
         &somId_RemoveUnusedMousePage,
         &somDI_AMouseX_RemoveUnusedMousePage,
         (somMethodProc *) AMouseX_RemoveUnusedMousePage,
         (somMethodProc *)((void*)-1),
#ifdef RemoveUnusedMousePage_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&RemoveUnusedMousePageStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t AMouseOM[] = {
    {    &somId_AMousewpAddMouseTimingPage,
         (somMethodProc *) AMouseX_wpAddMouseTimingPage    },
    {    &somId_AMousewpAddMouseMappingsPage,
         (somMethodProc *) AMouseX_wpAddMouseMappingsPage    },
    {    &somId_AMousewpAddSettingsPages,
         (somMethodProc *) AMouseX_wpAddSettingsPages    },
    {    &somId_AMousewpModifyPopupMenu,
         (somMethodProc *) AMouseX_wpModifyPopupMenu    },
    {    &somId_AMousewpFilterPopupMenu,
         (somMethodProc *) AMouseX_wpFilterPopupMenu    },
    {    &somId_AMousewpMenuItemSelected,
         (somMethodProc *) AMouseX_wpMenuItemSelected    },
    {    &somId_AMousewpOpen,
         (somMethodProc *) AMouseX_wpOpen    },
    {    &somId_AMousewpSetup,
         (somMethodProc *) AMouseX_wpSetup    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_AMouse = "AMouse";
#ifndef somEMC_M_AMouse_defined
#define somEMC_M_AMouse_defined
static char * somEMC_M_AMouse = "M_AMouse";
#endif
static char * somPCN_AMouse_WPMouse = "WPMouse";

static somId somPCAMouse[] = {
    &somPCN_AMouse_WPMouse,
};

static somStaticClassInfo AMouseSCI = {
    4, 9, 8, 0, 0, 0,
    AMouse_MajorVersion, AMouse_MinorVersion,
    sizeof(AMouseData), AMouse_MaxNoMethods, 1,
    &somCN_AMouse,
    &somEMC_M_AMouse, 0,
    somPCAMouse,
    (somClassDataStructure *) &AMouseClassData,
    (somCClassDataStructure *) &AMouseCClassData,
    AMouseSM, AMouseOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    9, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK AMouseNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;

    if (_AMouse && _somCheckVersion(_AMouse, somtmajorVersion, somtminorVersion))
          return _AMouse;
    WPMouseNewClass(WPMouse_MajorVersion,WPMouse_MinorVersion);	/* static reference */
    /* Explicit metaclass, so get it */ 
    M_AMouseNewClass(M_AMouse_MajorVersion,M_AMouse_MinorVersion);	/* static reference */
    result = somBuildClass(0xFFFFFFFF,&AMouseSCI, somtmajorVersion, somtminorVersion);
    AMouse_parent_WPMouse_wpSetup_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPObjectClassData.wpSetup); 
    AMouse_parent_WPMouse_wpOpen_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPObjectClassData.wpOpen); 
    AMouse_parent_WPMouse_wpMenuItemSelected_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPObjectClassData.wpMenuItemSelected); 
    AMouse_parent_WPMouse_wpFilterPopupMenu_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPObjectClassData.wpFilterPopupMenu); 
    AMouse_parent_WPMouse_wpModifyPopupMenu_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPObjectClassData.wpModifyPopupMenu); 
    AMouse_parent_WPMouse_wpAddSettingsPages_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPObjectClassData.wpAddSettingsPages); 
    AMouse_parent_WPMouse_wpAddMouseMappingsPage_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPMouseClassData.wpAddMouseMappingsPage); 
    AMouse_parent_WPMouse_wpAddMouseTimingPage_resolved = 
	somParentNumResolve(AMouseCClassData.parentMtab, 1, WPMouseClassData.wpAddMouseTimingPage); 
    return result;
}

/*
 * Functions for attributes.
 */

#endif /* Primary Implementation Support */
#pragma info(restore)

#endif       /* SOM_AMouse_ih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_M_AMouse_ih
#define SOM_M_AMouse_ih

#pragma info(none)

#include <AMouse.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
  #define SOM_Scope extern "C"
#else
  #define SOM_Scope extern
#endif  /* __cplusplus */
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass M_AMouseCClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define M_AMouse_MaxNoMethods 37

/*
 * -- Instance data
 */
typedef struct {
	M_AMouse_HPOINTER hMyIcon;
} M_AMouseData;

/*
 * GetData macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef M_AMouseData* SOMLINK somTP_M_AMouse_DataThunk(void*);
#ifdef __IBMC__
#pragma linkage(somTP_M_AMouse_DataThunk, system)
#endif
typedef somTP_M_AMouse_DataThunk *somTD_M_AMouse_DataThunk;

#define M_AMouseGetData(somSelf) \
   (((somTD_M_AMouse_DataThunk)(M_AMouseCClassData.instanceDataToken))(somSelf))

/*
 * Instance variable and staticdata access macros
 */
#ifndef NO_VARIABLE_MACROS
#define _hMyIcon (somThis->hMyIcon)
#endif

/*
 * Primary Implementation File Support
 */
#if (defined(AMouse_Class_Source) || defined(M_AMouse_Class_Source) || defined(SOM_Module_amouse_Source))

/*
 * Trace/Debug macro
 */
#ifndef M_AMouseMethodDebug
   #define M_AMouseMethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* M_AMouseMethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */

/*
 * Overridden method: wpclsInitData
 */
#pragma linkage(AMouseM_wpclsInitData, system)
SOM_Scope void  SOMLINK AMouseM_wpclsInitData(M_AMouse *somSelf);
static char *somMN_M_AMousewpclsInitData = "M_WPObject::wpclsInitData";
static somId somId_M_AMousewpclsInitData = &somMN_M_AMousewpclsInitData;
#ifdef somId_wpclsInitData
#undef somId_wpclsInitData
#else
#define somId_wpclsInitData somId_M_AMousewpclsInitData
#endif
static somMethodProc* M_AMouse_parent_M_WPMouse_wpclsInitData_resolved;
#define M_AMouse_parent_M_WPMouse_wpclsInitData(somSelf) \
  ((( somTD_M_WPObject_wpclsInitData ) \
    M_AMouse_parent_M_WPMouse_wpclsInitData_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPMouse_wpclsInitData
  #ifdef parent_M_WPMouse_wpclsInitData
     #undef parent_M_WPMouse_wpclsInitData
     #define SOMGD_pmc_M_WPMouse_wpclsInitData 1
  #else
     #define parent_M_WPMouse_wpclsInitData M_AMouse_parent_M_WPMouse_wpclsInitData
  #endif /* parent_M_WPMouse_wpclsInitData */
#endif /* SOMGD_pmc_M_WPMouse_wpclsInitData */
#ifndef parent_wpclsInitData
     #define parent_wpclsInitData M_AMouse_parent_M_WPMouse_wpclsInitData
#endif  /* parent_wpclsInitData */
#define M_AMouse_parents_wpclsInitData(somSelf) (\
   M_AMouse_parent_M_WPMouse_wpclsInitData(somSelf))

/*
 * Overridden method: wpclsUnInitData
 */
#pragma linkage(AMouseM_wpclsUnInitData, system)
SOM_Scope void  SOMLINK AMouseM_wpclsUnInitData(M_AMouse *somSelf);
static char *somMN_M_AMousewpclsUnInitData = "M_WPObject::wpclsUnInitData";
static somId somId_M_AMousewpclsUnInitData = &somMN_M_AMousewpclsUnInitData;
#ifdef somId_wpclsUnInitData
#undef somId_wpclsUnInitData
#else
#define somId_wpclsUnInitData somId_M_AMousewpclsUnInitData
#endif
static somMethodProc* M_AMouse_parent_M_WPMouse_wpclsUnInitData_resolved;
#define M_AMouse_parent_M_WPMouse_wpclsUnInitData(somSelf) \
  ((( somTD_M_WPObject_wpclsUnInitData ) \
    M_AMouse_parent_M_WPMouse_wpclsUnInitData_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPMouse_wpclsUnInitData
  #ifdef parent_M_WPMouse_wpclsUnInitData
     #undef parent_M_WPMouse_wpclsUnInitData
     #define SOMGD_pmc_M_WPMouse_wpclsUnInitData 1
  #else
     #define parent_M_WPMouse_wpclsUnInitData M_AMouse_parent_M_WPMouse_wpclsUnInitData
  #endif /* parent_M_WPMouse_wpclsUnInitData */
#endif /* SOMGD_pmc_M_WPMouse_wpclsUnInitData */
#ifndef parent_wpclsUnInitData
     #define parent_wpclsUnInitData M_AMouse_parent_M_WPMouse_wpclsUnInitData
#endif  /* parent_wpclsUnInitData */
#define M_AMouse_parents_wpclsUnInitData(somSelf) (\
   M_AMouse_parent_M_WPMouse_wpclsUnInitData(somSelf))

/*
 * Overridden method: wpclsQueryDefaultView
 */
#pragma linkage(AMouseM_wpclsQueryDefaultView, system)
SOM_Scope ULONG  SOMLINK AMouseM_wpclsQueryDefaultView(M_AMouse *somSelf);
static char *somMN_M_AMousewpclsQueryDefaultView = "M_WPObject::wpclsQueryDefaultView";
static somId somId_M_AMousewpclsQueryDefaultView = &somMN_M_AMousewpclsQueryDefaultView;
#ifdef somId_wpclsQueryDefaultView
#undef somId_wpclsQueryDefaultView
#else
#define somId_wpclsQueryDefaultView somId_M_AMousewpclsQueryDefaultView
#endif
static somMethodProc* M_AMouse_parent_M_WPMouse_wpclsQueryDefaultView_resolved;
#define M_AMouse_parent_M_WPMouse_wpclsQueryDefaultView(somSelf) \
  ((( somTD_M_WPObject_wpclsQueryDefaultView ) \
    M_AMouse_parent_M_WPMouse_wpclsQueryDefaultView_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPMouse_wpclsQueryDefaultView
  #ifdef parent_M_WPMouse_wpclsQueryDefaultView
     #undef parent_M_WPMouse_wpclsQueryDefaultView
     #define SOMGD_pmc_M_WPMouse_wpclsQueryDefaultView 1
  #else
     #define parent_M_WPMouse_wpclsQueryDefaultView M_AMouse_parent_M_WPMouse_wpclsQueryDefaultView
  #endif /* parent_M_WPMouse_wpclsQueryDefaultView */
#endif /* SOMGD_pmc_M_WPMouse_wpclsQueryDefaultView */
#ifndef parent_wpclsQueryDefaultView
     #define parent_wpclsQueryDefaultView M_AMouse_parent_M_WPMouse_wpclsQueryDefaultView
#endif  /* parent_wpclsQueryDefaultView */
#define M_AMouse_parents_wpclsQueryDefaultView(somSelf) (\
   M_AMouse_parent_M_WPMouse_wpclsQueryDefaultView(somSelf))

/*
 * Overridden method: wpclsQueryIcon
 */
#pragma linkage(AMouseM_wpclsQueryIcon, system)
SOM_Scope HPOINTER  SOMLINK AMouseM_wpclsQueryIcon(M_AMouse *somSelf);
static char *somMN_M_AMousewpclsQueryIcon = "M_WPObject::wpclsQueryIcon";
static somId somId_M_AMousewpclsQueryIcon = &somMN_M_AMousewpclsQueryIcon;
#ifdef somId_wpclsQueryIcon
#undef somId_wpclsQueryIcon
#else
#define somId_wpclsQueryIcon somId_M_AMousewpclsQueryIcon
#endif
static somMethodProc* M_AMouse_parent_M_WPMouse_wpclsQueryIcon_resolved;
#define M_AMouse_parent_M_WPMouse_wpclsQueryIcon(somSelf) \
  ((( somTD_M_WPObject_wpclsQueryIcon ) \
    M_AMouse_parent_M_WPMouse_wpclsQueryIcon_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPMouse_wpclsQueryIcon
  #ifdef parent_M_WPMouse_wpclsQueryIcon
     #undef parent_M_WPMouse_wpclsQueryIcon
     #define SOMGD_pmc_M_WPMouse_wpclsQueryIcon 1
  #else
     #define parent_M_WPMouse_wpclsQueryIcon M_AMouse_parent_M_WPMouse_wpclsQueryIcon
  #endif /* parent_M_WPMouse_wpclsQueryIcon */
#endif /* SOMGD_pmc_M_WPMouse_wpclsQueryIcon */
#ifndef parent_wpclsQueryIcon
     #define parent_wpclsQueryIcon M_AMouse_parent_M_WPMouse_wpclsQueryIcon
#endif  /* parent_wpclsQueryIcon */
#define M_AMouse_parents_wpclsQueryIcon(somSelf) (\
   M_AMouse_parent_M_WPMouse_wpclsQueryIcon(somSelf))

/*
 * Overridden method: wpclsQueryDefaultHelp
 */
#pragma linkage(AMouseM_wpclsQueryDefaultHelp, system)
SOM_Scope BOOL  SOMLINK AMouseM_wpclsQueryDefaultHelp(M_AMouse *somSelf,
		PULONG pHelpPanelId,
		PSZ pszHelpLibrary);
static char *somMN_M_AMousewpclsQueryDefaultHelp = "M_WPObject::wpclsQueryDefaultHelp";
static somId somId_M_AMousewpclsQueryDefaultHelp = &somMN_M_AMousewpclsQueryDefaultHelp;
#ifdef somId_wpclsQueryDefaultHelp
#undef somId_wpclsQueryDefaultHelp
#else
#define somId_wpclsQueryDefaultHelp somId_M_AMousewpclsQueryDefaultHelp
#endif
static somMethodProc* M_AMouse_parent_M_WPMouse_wpclsQueryDefaultHelp_resolved;
#define M_AMouse_parent_M_WPMouse_wpclsQueryDefaultHelp(somSelf,pHelpPanelId,pszHelpLibrary) \
  ((( somTD_M_WPObject_wpclsQueryDefaultHelp ) \
    M_AMouse_parent_M_WPMouse_wpclsQueryDefaultHelp_resolved) \
	 (somSelf,pHelpPanelId,pszHelpLibrary))
#ifndef SOMGD_pmc_M_WPMouse_wpclsQueryDefaultHelp
  #ifdef parent_M_WPMouse_wpclsQueryDefaultHelp
     #undef parent_M_WPMouse_wpclsQueryDefaultHelp
     #define SOMGD_pmc_M_WPMouse_wpclsQueryDefaultHelp 1
  #else
     #define parent_M_WPMouse_wpclsQueryDefaultHelp M_AMouse_parent_M_WPMouse_wpclsQueryDefaultHelp
  #endif /* parent_M_WPMouse_wpclsQueryDefaultHelp */
#endif /* SOMGD_pmc_M_WPMouse_wpclsQueryDefaultHelp */
#ifndef parent_wpclsQueryDefaultHelp
     #define parent_wpclsQueryDefaultHelp M_AMouse_parent_M_WPMouse_wpclsQueryDefaultHelp
#endif  /* parent_wpclsQueryDefaultHelp */
#define M_AMouse_parents_wpclsQueryDefaultHelp(somSelf,pHelpPanelId,pszHelpLibrary) (\
   M_AMouse_parent_M_WPMouse_wpclsQueryDefaultHelp(somSelf,pHelpPanelId,pszHelpLibrary))

/*
 * Initialize the class data structure
 */
SOMEXTERN struct M_AMouseClassDataStructure SOMDLINK M_AMouseClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct M_AMouseCClassDataStructure SOMDLINK M_AMouseCClassData = {(somMethodTabs) NULL};

/*
 * New Method: clsSaveData
 */
#pragma linkage(AMouseM_clsSaveData, system)
SOM_Scope void  SOMLINK AMouseM_clsSaveData(M_AMouse *somSelf);
#ifndef somMN_clsSaveData_defined
#define somMN_clsSaveData_defined
static char *somMN_clsSaveData = "clsSaveData";
static somId somId_clsSaveData = &somMN_clsSaveData;
#endif  /* somMN_clsSaveData_defined */
#ifndef somDS_AMouseM_clsSaveData_defined
#define somDS_AMouseM_clsSaveData_defined
static char *somDS_AMouseM_clsSaveData = "::M_AMouse::clsSaveData";
static somId somDI_AMouseM_clsSaveData = &somDS_AMouseM_clsSaveData;
#endif  /* somDS_AMouseM_clsSaveData_defined */
#define AMouseM_clsSaveData_somApRdDefault

/*
 * New Method: clsSetScrollMode
 */
#pragma linkage(AMouseM_clsSetScrollMode, system)
SOM_Scope void  SOMLINK AMouseM_clsSetScrollMode(M_AMouse *somSelf,
		ULONG ulWheelPageType,
		ULONG ulScrollMode);
#ifndef somMN_clsSetScrollMode_defined
#define somMN_clsSetScrollMode_defined
static char *somMN_clsSetScrollMode = "clsSetScrollMode";
static somId somId_clsSetScrollMode = &somMN_clsSetScrollMode;
#endif  /* somMN_clsSetScrollMode_defined */
#ifndef somDS_AMouseM_clsSetScrollMode_defined
#define somDS_AMouseM_clsSetScrollMode_defined
static char *somDS_AMouseM_clsSetScrollMode = "::M_AMouse::clsSetScrollMode";
static somId somDI_AMouseM_clsSetScrollMode = &somDS_AMouseM_clsSetScrollMode;
#endif  /* somDS_AMouseM_clsSetScrollMode_defined */
#define AMouseM_clsSetScrollMode_somApRdDefault

/*
 * New Method: clsGetScrollMode
 */
#pragma linkage(AMouseM_clsGetScrollMode, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetScrollMode(M_AMouse *somSelf,
		ULONG ulWheelPageType);
#ifndef somMN_clsGetScrollMode_defined
#define somMN_clsGetScrollMode_defined
static char *somMN_clsGetScrollMode = "clsGetScrollMode";
static somId somId_clsGetScrollMode = &somMN_clsGetScrollMode;
#endif  /* somMN_clsGetScrollMode_defined */
#ifndef somDS_AMouseM_clsGetScrollMode_defined
#define somDS_AMouseM_clsGetScrollMode_defined
static char *somDS_AMouseM_clsGetScrollMode = "::M_AMouse::clsGetScrollMode";
static somId somDI_AMouseM_clsGetScrollMode = &somDS_AMouseM_clsGetScrollMode;
#endif  /* somDS_AMouseM_clsGetScrollMode_defined */
#define AMouseM_clsGetScrollMode_somApRdDefault

/*
 * New Method: clsSetScrollNum
 */
#pragma linkage(AMouseM_clsSetScrollNum, system)
SOM_Scope void  SOMLINK AMouseM_clsSetScrollNum(M_AMouse *somSelf,
		ULONG ulWheelPageType,
		ULONG ulNewScrollNum);
#ifndef somMN_clsSetScrollNum_defined
#define somMN_clsSetScrollNum_defined
static char *somMN_clsSetScrollNum = "clsSetScrollNum";
static somId somId_clsSetScrollNum = &somMN_clsSetScrollNum;
#endif  /* somMN_clsSetScrollNum_defined */
#ifndef somDS_AMouseM_clsSetScrollNum_defined
#define somDS_AMouseM_clsSetScrollNum_defined
static char *somDS_AMouseM_clsSetScrollNum = "::M_AMouse::clsSetScrollNum";
static somId somDI_AMouseM_clsSetScrollNum = &somDS_AMouseM_clsSetScrollNum;
#endif  /* somDS_AMouseM_clsSetScrollNum_defined */
#define AMouseM_clsSetScrollNum_somApRdDefault

/*
 * New Method: clsGetScrollNum
 */
#pragma linkage(AMouseM_clsGetScrollNum, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetScrollNum(M_AMouse *somSelf,
		ULONG ulWheelPageType);
#ifndef somMN_clsGetScrollNum_defined
#define somMN_clsGetScrollNum_defined
static char *somMN_clsGetScrollNum = "clsGetScrollNum";
static somId somId_clsGetScrollNum = &somMN_clsGetScrollNum;
#endif  /* somMN_clsGetScrollNum_defined */
#ifndef somDS_AMouseM_clsGetScrollNum_defined
#define somDS_AMouseM_clsGetScrollNum_defined
static char *somDS_AMouseM_clsGetScrollNum = "::M_AMouse::clsGetScrollNum";
static somId somDI_AMouseM_clsGetScrollNum = &somDS_AMouseM_clsGetScrollNum;
#endif  /* somDS_AMouseM_clsGetScrollNum_defined */
#define AMouseM_clsGetScrollNum_somApRdDefault

/*
 * New Method: clsSetWheelTarget
 */
#pragma linkage(AMouseM_clsSetWheelTarget, system)
SOM_Scope void  SOMLINK AMouseM_clsSetWheelTarget(M_AMouse *somSelf,
		ULONG ulWheelPageType,
		ULONG ulNewWheelTarget);
#ifndef somMN_clsSetWheelTarget_defined
#define somMN_clsSetWheelTarget_defined
static char *somMN_clsSetWheelTarget = "clsSetWheelTarget";
static somId somId_clsSetWheelTarget = &somMN_clsSetWheelTarget;
#endif  /* somMN_clsSetWheelTarget_defined */
#ifndef somDS_AMouseM_clsSetWheelTarget_defined
#define somDS_AMouseM_clsSetWheelTarget_defined
static char *somDS_AMouseM_clsSetWheelTarget = "::M_AMouse::clsSetWheelTarget";
static somId somDI_AMouseM_clsSetWheelTarget = &somDS_AMouseM_clsSetWheelTarget;
#endif  /* somDS_AMouseM_clsSetWheelTarget_defined */
#define AMouseM_clsSetWheelTarget_somApRdDefault

/*
 * New Method: clsGetWheelTarget
 */
#pragma linkage(AMouseM_clsGetWheelTarget, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetWheelTarget(M_AMouse *somSelf,
		ULONG ulWheelPageType);
#ifndef somMN_clsGetWheelTarget_defined
#define somMN_clsGetWheelTarget_defined
static char *somMN_clsGetWheelTarget = "clsGetWheelTarget";
static somId somId_clsGetWheelTarget = &somMN_clsGetWheelTarget;
#endif  /* somMN_clsGetWheelTarget_defined */
#ifndef somDS_AMouseM_clsGetWheelTarget_defined
#define somDS_AMouseM_clsGetWheelTarget_defined
static char *somDS_AMouseM_clsGetWheelTarget = "::M_AMouse::clsGetWheelTarget";
static somId somDI_AMouseM_clsGetWheelTarget = &somDS_AMouseM_clsGetWheelTarget;
#endif  /* somDS_AMouseM_clsGetWheelTarget_defined */
#define AMouseM_clsGetWheelTarget_somApRdDefault

/*
 * New Method: clsSetStartupMode
 */
#pragma linkage(AMouseM_clsSetStartupMode, system)
SOM_Scope void  SOMLINK AMouseM_clsSetStartupMode(M_AMouse *somSelf,
		ULONG ulStartupMode);
#ifndef somMN_clsSetStartupMode_defined
#define somMN_clsSetStartupMode_defined
static char *somMN_clsSetStartupMode = "clsSetStartupMode";
static somId somId_clsSetStartupMode = &somMN_clsSetStartupMode;
#endif  /* somMN_clsSetStartupMode_defined */
#ifndef somDS_AMouseM_clsSetStartupMode_defined
#define somDS_AMouseM_clsSetStartupMode_defined
static char *somDS_AMouseM_clsSetStartupMode = "::M_AMouse::clsSetStartupMode";
static somId somDI_AMouseM_clsSetStartupMode = &somDS_AMouseM_clsSetStartupMode;
#endif  /* somDS_AMouseM_clsSetStartupMode_defined */
#define AMouseM_clsSetStartupMode_somApRdDefault

/*
 * New Method: clsGetStartupMode
 */
#pragma linkage(AMouseM_clsGetStartupMode, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetStartupMode(M_AMouse *somSelf);
#ifndef somMN_clsGetStartupMode_defined
#define somMN_clsGetStartupMode_defined
static char *somMN_clsGetStartupMode = "clsGetStartupMode";
static somId somId_clsGetStartupMode = &somMN_clsGetStartupMode;
#endif  /* somMN_clsGetStartupMode_defined */
#ifndef somDS_AMouseM_clsGetStartupMode_defined
#define somDS_AMouseM_clsGetStartupMode_defined
static char *somDS_AMouseM_clsGetStartupMode = "::M_AMouse::clsGetStartupMode";
static somId somDI_AMouseM_clsGetStartupMode = &somDS_AMouseM_clsGetStartupMode;
#endif  /* somDS_AMouseM_clsGetStartupMode_defined */
#define AMouseM_clsGetStartupMode_somApRdDefault

/*
 * New Method: clsSetAccelDelay
 */
#pragma linkage(AMouseM_clsSetAccelDelay, system)
SOM_Scope void  SOMLINK AMouseM_clsSetAccelDelay(M_AMouse *somSelf,
		ULONG ulAccelDelay);
#ifndef somMN_clsSetAccelDelay_defined
#define somMN_clsSetAccelDelay_defined
static char *somMN_clsSetAccelDelay = "clsSetAccelDelay";
static somId somId_clsSetAccelDelay = &somMN_clsSetAccelDelay;
#endif  /* somMN_clsSetAccelDelay_defined */
#ifndef somDS_AMouseM_clsSetAccelDelay_defined
#define somDS_AMouseM_clsSetAccelDelay_defined
static char *somDS_AMouseM_clsSetAccelDelay = "::M_AMouse::clsSetAccelDelay";
static somId somDI_AMouseM_clsSetAccelDelay = &somDS_AMouseM_clsSetAccelDelay;
#endif  /* somDS_AMouseM_clsSetAccelDelay_defined */
#define AMouseM_clsSetAccelDelay_somApRdDefault

/*
 * New Method: clsGetAccelDelay
 */
#pragma linkage(AMouseM_clsGetAccelDelay, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetAccelDelay(M_AMouse *somSelf);
#ifndef somMN_clsGetAccelDelay_defined
#define somMN_clsGetAccelDelay_defined
static char *somMN_clsGetAccelDelay = "clsGetAccelDelay";
static somId somId_clsGetAccelDelay = &somMN_clsGetAccelDelay;
#endif  /* somMN_clsGetAccelDelay_defined */
#ifndef somDS_AMouseM_clsGetAccelDelay_defined
#define somDS_AMouseM_clsGetAccelDelay_defined
static char *somDS_AMouseM_clsGetAccelDelay = "::M_AMouse::clsGetAccelDelay";
static somId somDI_AMouseM_clsGetAccelDelay = &somDS_AMouseM_clsGetAccelDelay;
#endif  /* somDS_AMouseM_clsGetAccelDelay_defined */
#define AMouseM_clsGetAccelDelay_somApRdDefault

/*
 * New Method: clsSetAccelValue
 */
#pragma linkage(AMouseM_clsSetAccelValue, system)
SOM_Scope void  SOMLINK AMouseM_clsSetAccelValue(M_AMouse *somSelf,
		ULONG ulAccelValue);
#ifndef somMN_clsSetAccelValue_defined
#define somMN_clsSetAccelValue_defined
static char *somMN_clsSetAccelValue = "clsSetAccelValue";
static somId somId_clsSetAccelValue = &somMN_clsSetAccelValue;
#endif  /* somMN_clsSetAccelValue_defined */
#ifndef somDS_AMouseM_clsSetAccelValue_defined
#define somDS_AMouseM_clsSetAccelValue_defined
static char *somDS_AMouseM_clsSetAccelValue = "::M_AMouse::clsSetAccelValue";
static somId somDI_AMouseM_clsSetAccelValue = &somDS_AMouseM_clsSetAccelValue;
#endif  /* somDS_AMouseM_clsSetAccelValue_defined */
#define AMouseM_clsSetAccelValue_somApRdDefault

/*
 * New Method: clsGetAccelValue
 */
#pragma linkage(AMouseM_clsGetAccelValue, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetAccelValue(M_AMouse *somSelf);
#ifndef somMN_clsGetAccelValue_defined
#define somMN_clsGetAccelValue_defined
static char *somMN_clsGetAccelValue = "clsGetAccelValue";
static somId somId_clsGetAccelValue = &somMN_clsGetAccelValue;
#endif  /* somMN_clsGetAccelValue_defined */
#ifndef somDS_AMouseM_clsGetAccelValue_defined
#define somDS_AMouseM_clsGetAccelValue_defined
static char *somDS_AMouseM_clsGetAccelValue = "::M_AMouse::clsGetAccelValue";
static somId somDI_AMouseM_clsGetAccelValue = &somDS_AMouseM_clsGetAccelValue;
#endif  /* somDS_AMouseM_clsGetAccelValue_defined */
#define AMouseM_clsGetAccelValue_somApRdDefault

/*
 * New Method: clsSetPollingRate
 */
#pragma linkage(AMouseM_clsSetPollingRate, system)
SOM_Scope void  SOMLINK AMouseM_clsSetPollingRate(M_AMouse *somSelf,
		ULONG ulPollingRate);
#ifndef somMN_clsSetPollingRate_defined
#define somMN_clsSetPollingRate_defined
static char *somMN_clsSetPollingRate = "clsSetPollingRate";
static somId somId_clsSetPollingRate = &somMN_clsSetPollingRate;
#endif  /* somMN_clsSetPollingRate_defined */
#ifndef somDS_AMouseM_clsSetPollingRate_defined
#define somDS_AMouseM_clsSetPollingRate_defined
static char *somDS_AMouseM_clsSetPollingRate = "::M_AMouse::clsSetPollingRate";
static somId somDI_AMouseM_clsSetPollingRate = &somDS_AMouseM_clsSetPollingRate;
#endif  /* somDS_AMouseM_clsSetPollingRate_defined */
#define AMouseM_clsSetPollingRate_somApRdDefault

/*
 * New Method: clsGetPollingRate
 */
#pragma linkage(AMouseM_clsGetPollingRate, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetPollingRate(M_AMouse *somSelf);
#ifndef somMN_clsGetPollingRate_defined
#define somMN_clsGetPollingRate_defined
static char *somMN_clsGetPollingRate = "clsGetPollingRate";
static somId somId_clsGetPollingRate = &somMN_clsGetPollingRate;
#endif  /* somMN_clsGetPollingRate_defined */
#ifndef somDS_AMouseM_clsGetPollingRate_defined
#define somDS_AMouseM_clsGetPollingRate_defined
static char *somDS_AMouseM_clsGetPollingRate = "::M_AMouse::clsGetPollingRate";
static somId somDI_AMouseM_clsGetPollingRate = &somDS_AMouseM_clsGetPollingRate;
#endif  /* somDS_AMouseM_clsGetPollingRate_defined */
#define AMouseM_clsGetPollingRate_somApRdDefault

/*
 * New Method: clsSetAccelLevel1
 */
#pragma linkage(AMouseM_clsSetAccelLevel1, system)
SOM_Scope void  SOMLINK AMouseM_clsSetAccelLevel1(M_AMouse *somSelf,
		ULONG ulAccelLevel);
#ifndef somMN_clsSetAccelLevel1_defined
#define somMN_clsSetAccelLevel1_defined
static char *somMN_clsSetAccelLevel1 = "clsSetAccelLevel1";
static somId somId_clsSetAccelLevel1 = &somMN_clsSetAccelLevel1;
#endif  /* somMN_clsSetAccelLevel1_defined */
#ifndef somDS_AMouseM_clsSetAccelLevel1_defined
#define somDS_AMouseM_clsSetAccelLevel1_defined
static char *somDS_AMouseM_clsSetAccelLevel1 = "::M_AMouse::clsSetAccelLevel1";
static somId somDI_AMouseM_clsSetAccelLevel1 = &somDS_AMouseM_clsSetAccelLevel1;
#endif  /* somDS_AMouseM_clsSetAccelLevel1_defined */
#define AMouseM_clsSetAccelLevel1_somApRdDefault

/*
 * New Method: clsGetAccelLevel1
 */
#pragma linkage(AMouseM_clsGetAccelLevel1, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetAccelLevel1(M_AMouse *somSelf);
#ifndef somMN_clsGetAccelLevel1_defined
#define somMN_clsGetAccelLevel1_defined
static char *somMN_clsGetAccelLevel1 = "clsGetAccelLevel1";
static somId somId_clsGetAccelLevel1 = &somMN_clsGetAccelLevel1;
#endif  /* somMN_clsGetAccelLevel1_defined */
#ifndef somDS_AMouseM_clsGetAccelLevel1_defined
#define somDS_AMouseM_clsGetAccelLevel1_defined
static char *somDS_AMouseM_clsGetAccelLevel1 = "::M_AMouse::clsGetAccelLevel1";
static somId somDI_AMouseM_clsGetAccelLevel1 = &somDS_AMouseM_clsGetAccelLevel1;
#endif  /* somDS_AMouseM_clsGetAccelLevel1_defined */
#define AMouseM_clsGetAccelLevel1_somApRdDefault

/*
 * New Method: clsSetAccelLvl1Mult
 */
#pragma linkage(AMouseM_clsSetAccelLvl1Mult, system)
SOM_Scope void  SOMLINK AMouseM_clsSetAccelLvl1Mult(M_AMouse *somSelf,
		ULONG ulAccelLvlMult);
#ifndef somMN_clsSetAccelLvl1Mult_defined
#define somMN_clsSetAccelLvl1Mult_defined
static char *somMN_clsSetAccelLvl1Mult = "clsSetAccelLvl1Mult";
static somId somId_clsSetAccelLvl1Mult = &somMN_clsSetAccelLvl1Mult;
#endif  /* somMN_clsSetAccelLvl1Mult_defined */
#ifndef somDS_AMouseM_clsSetAccelLvl1Mult_defined
#define somDS_AMouseM_clsSetAccelLvl1Mult_defined
static char *somDS_AMouseM_clsSetAccelLvl1Mult = "::M_AMouse::clsSetAccelLvl1Mult";
static somId somDI_AMouseM_clsSetAccelLvl1Mult = &somDS_AMouseM_clsSetAccelLvl1Mult;
#endif  /* somDS_AMouseM_clsSetAccelLvl1Mult_defined */
#define AMouseM_clsSetAccelLvl1Mult_somApRdDefault

/*
 * New Method: clsGetAccelLvl1Mult
 */
#pragma linkage(AMouseM_clsGetAccelLvl1Mult, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetAccelLvl1Mult(M_AMouse *somSelf);
#ifndef somMN_clsGetAccelLvl1Mult_defined
#define somMN_clsGetAccelLvl1Mult_defined
static char *somMN_clsGetAccelLvl1Mult = "clsGetAccelLvl1Mult";
static somId somId_clsGetAccelLvl1Mult = &somMN_clsGetAccelLvl1Mult;
#endif  /* somMN_clsGetAccelLvl1Mult_defined */
#ifndef somDS_AMouseM_clsGetAccelLvl1Mult_defined
#define somDS_AMouseM_clsGetAccelLvl1Mult_defined
static char *somDS_AMouseM_clsGetAccelLvl1Mult = "::M_AMouse::clsGetAccelLvl1Mult";
static somId somDI_AMouseM_clsGetAccelLvl1Mult = &somDS_AMouseM_clsGetAccelLvl1Mult;
#endif  /* somDS_AMouseM_clsGetAccelLvl1Mult_defined */
#define AMouseM_clsGetAccelLvl1Mult_somApRdDefault

/*
 * New Method: clsSetAccelLevel2
 */
#pragma linkage(AMouseM_clsSetAccelLevel2, system)
SOM_Scope void  SOMLINK AMouseM_clsSetAccelLevel2(M_AMouse *somSelf,
		ULONG ulAccelLevel);
#ifndef somMN_clsSetAccelLevel2_defined
#define somMN_clsSetAccelLevel2_defined
static char *somMN_clsSetAccelLevel2 = "clsSetAccelLevel2";
static somId somId_clsSetAccelLevel2 = &somMN_clsSetAccelLevel2;
#endif  /* somMN_clsSetAccelLevel2_defined */
#ifndef somDS_AMouseM_clsSetAccelLevel2_defined
#define somDS_AMouseM_clsSetAccelLevel2_defined
static char *somDS_AMouseM_clsSetAccelLevel2 = "::M_AMouse::clsSetAccelLevel2";
static somId somDI_AMouseM_clsSetAccelLevel2 = &somDS_AMouseM_clsSetAccelLevel2;
#endif  /* somDS_AMouseM_clsSetAccelLevel2_defined */
#define AMouseM_clsSetAccelLevel2_somApRdDefault

/*
 * New Method: clsGetAccelLevel2
 */
#pragma linkage(AMouseM_clsGetAccelLevel2, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetAccelLevel2(M_AMouse *somSelf);
#ifndef somMN_clsGetAccelLevel2_defined
#define somMN_clsGetAccelLevel2_defined
static char *somMN_clsGetAccelLevel2 = "clsGetAccelLevel2";
static somId somId_clsGetAccelLevel2 = &somMN_clsGetAccelLevel2;
#endif  /* somMN_clsGetAccelLevel2_defined */
#ifndef somDS_AMouseM_clsGetAccelLevel2_defined
#define somDS_AMouseM_clsGetAccelLevel2_defined
static char *somDS_AMouseM_clsGetAccelLevel2 = "::M_AMouse::clsGetAccelLevel2";
static somId somDI_AMouseM_clsGetAccelLevel2 = &somDS_AMouseM_clsGetAccelLevel2;
#endif  /* somDS_AMouseM_clsGetAccelLevel2_defined */
#define AMouseM_clsGetAccelLevel2_somApRdDefault

/*
 * New Method: clsSetAccelLvl2Mult
 */
#pragma linkage(AMouseM_clsSetAccelLvl2Mult, system)
SOM_Scope void  SOMLINK AMouseM_clsSetAccelLvl2Mult(M_AMouse *somSelf,
		ULONG ulAccelLvlMult);
#ifndef somMN_clsSetAccelLvl2Mult_defined
#define somMN_clsSetAccelLvl2Mult_defined
static char *somMN_clsSetAccelLvl2Mult = "clsSetAccelLvl2Mult";
static somId somId_clsSetAccelLvl2Mult = &somMN_clsSetAccelLvl2Mult;
#endif  /* somMN_clsSetAccelLvl2Mult_defined */
#ifndef somDS_AMouseM_clsSetAccelLvl2Mult_defined
#define somDS_AMouseM_clsSetAccelLvl2Mult_defined
static char *somDS_AMouseM_clsSetAccelLvl2Mult = "::M_AMouse::clsSetAccelLvl2Mult";
static somId somDI_AMouseM_clsSetAccelLvl2Mult = &somDS_AMouseM_clsSetAccelLvl2Mult;
#endif  /* somDS_AMouseM_clsSetAccelLvl2Mult_defined */
#define AMouseM_clsSetAccelLvl2Mult_somApRdDefault

/*
 * New Method: clsGetAccelLvl2Mult
 */
#pragma linkage(AMouseM_clsGetAccelLvl2Mult, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetAccelLvl2Mult(M_AMouse *somSelf);
#ifndef somMN_clsGetAccelLvl2Mult_defined
#define somMN_clsGetAccelLvl2Mult_defined
static char *somMN_clsGetAccelLvl2Mult = "clsGetAccelLvl2Mult";
static somId somId_clsGetAccelLvl2Mult = &somMN_clsGetAccelLvl2Mult;
#endif  /* somMN_clsGetAccelLvl2Mult_defined */
#ifndef somDS_AMouseM_clsGetAccelLvl2Mult_defined
#define somDS_AMouseM_clsGetAccelLvl2Mult_defined
static char *somDS_AMouseM_clsGetAccelLvl2Mult = "::M_AMouse::clsGetAccelLvl2Mult";
static somId somDI_AMouseM_clsGetAccelLvl2Mult = &somDS_AMouseM_clsGetAccelLvl2Mult;
#endif  /* somDS_AMouseM_clsGetAccelLvl2Mult_defined */
#define AMouseM_clsGetAccelLvl2Mult_somApRdDefault

/*
 * New Method: clsSetBtnMode
 */
#pragma linkage(AMouseM_clsSetBtnMode, system)
SOM_Scope void  SOMLINK AMouseM_clsSetBtnMode(M_AMouse *somSelf,
		ULONG ulKeyPageType,
		ULONG ulKeyNum,
		ULONG ulBtnMode);
#ifndef somMN_clsSetBtnMode_defined
#define somMN_clsSetBtnMode_defined
static char *somMN_clsSetBtnMode = "clsSetBtnMode";
static somId somId_clsSetBtnMode = &somMN_clsSetBtnMode;
#endif  /* somMN_clsSetBtnMode_defined */
#ifndef somDS_AMouseM_clsSetBtnMode_defined
#define somDS_AMouseM_clsSetBtnMode_defined
static char *somDS_AMouseM_clsSetBtnMode = "::M_AMouse::clsSetBtnMode";
static somId somDI_AMouseM_clsSetBtnMode = &somDS_AMouseM_clsSetBtnMode;
#endif  /* somDS_AMouseM_clsSetBtnMode_defined */
#define AMouseM_clsSetBtnMode_somApRdDefault

/*
 * New Method: clsGetBtnMode
 */
#pragma linkage(AMouseM_clsGetBtnMode, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetBtnMode(M_AMouse *somSelf,
		ULONG ulKeyPageType,
		ULONG ulKeyNum);
#ifndef somMN_clsGetBtnMode_defined
#define somMN_clsGetBtnMode_defined
static char *somMN_clsGetBtnMode = "clsGetBtnMode";
static somId somId_clsGetBtnMode = &somMN_clsGetBtnMode;
#endif  /* somMN_clsGetBtnMode_defined */
#ifndef somDS_AMouseM_clsGetBtnMode_defined
#define somDS_AMouseM_clsGetBtnMode_defined
static char *somDS_AMouseM_clsGetBtnMode = "::M_AMouse::clsGetBtnMode";
static somId somDI_AMouseM_clsGetBtnMode = &somDS_AMouseM_clsGetBtnMode;
#endif  /* somDS_AMouseM_clsGetBtnMode_defined */
#define AMouseM_clsGetBtnMode_somApRdDefault

/*
 * New Method: clsSetBtnKeyCombMP1
 */
#pragma linkage(AMouseM_clsSetBtnKeyCombMP1, system)
SOM_Scope void  SOMLINK AMouseM_clsSetBtnKeyCombMP1(M_AMouse *somSelf,
		ULONG ulKeyPageType,
		ULONG ulKeyNum,
		ULONG ulMP1);
#ifndef somMN_clsSetBtnKeyCombMP1_defined
#define somMN_clsSetBtnKeyCombMP1_defined
static char *somMN_clsSetBtnKeyCombMP1 = "clsSetBtnKeyCombMP1";
static somId somId_clsSetBtnKeyCombMP1 = &somMN_clsSetBtnKeyCombMP1;
#endif  /* somMN_clsSetBtnKeyCombMP1_defined */
#ifndef somDS_AMouseM_clsSetBtnKeyCombMP1_defined
#define somDS_AMouseM_clsSetBtnKeyCombMP1_defined
static char *somDS_AMouseM_clsSetBtnKeyCombMP1 = "::M_AMouse::clsSetBtnKeyCombMP1";
static somId somDI_AMouseM_clsSetBtnKeyCombMP1 = &somDS_AMouseM_clsSetBtnKeyCombMP1;
#endif  /* somDS_AMouseM_clsSetBtnKeyCombMP1_defined */
#define AMouseM_clsSetBtnKeyCombMP1_somApRdDefault

/*
 * New Method: clsGetBtnKeyCombMP1
 */
#pragma linkage(AMouseM_clsGetBtnKeyCombMP1, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetBtnKeyCombMP1(M_AMouse *somSelf,
		ULONG ulKeyPageType,
		ULONG ulKeyNum);
#ifndef somMN_clsGetBtnKeyCombMP1_defined
#define somMN_clsGetBtnKeyCombMP1_defined
static char *somMN_clsGetBtnKeyCombMP1 = "clsGetBtnKeyCombMP1";
static somId somId_clsGetBtnKeyCombMP1 = &somMN_clsGetBtnKeyCombMP1;
#endif  /* somMN_clsGetBtnKeyCombMP1_defined */
#ifndef somDS_AMouseM_clsGetBtnKeyCombMP1_defined
#define somDS_AMouseM_clsGetBtnKeyCombMP1_defined
static char *somDS_AMouseM_clsGetBtnKeyCombMP1 = "::M_AMouse::clsGetBtnKeyCombMP1";
static somId somDI_AMouseM_clsGetBtnKeyCombMP1 = &somDS_AMouseM_clsGetBtnKeyCombMP1;
#endif  /* somDS_AMouseM_clsGetBtnKeyCombMP1_defined */
#define AMouseM_clsGetBtnKeyCombMP1_somApRdDefault

/*
 * New Method: clsSetBtnKeyCombMP2
 */
#pragma linkage(AMouseM_clsSetBtnKeyCombMP2, system)
SOM_Scope void  SOMLINK AMouseM_clsSetBtnKeyCombMP2(M_AMouse *somSelf,
		ULONG ulKeyPageType,
		ULONG ulKeyNum,
		ULONG ulMP2);
#ifndef somMN_clsSetBtnKeyCombMP2_defined
#define somMN_clsSetBtnKeyCombMP2_defined
static char *somMN_clsSetBtnKeyCombMP2 = "clsSetBtnKeyCombMP2";
static somId somId_clsSetBtnKeyCombMP2 = &somMN_clsSetBtnKeyCombMP2;
#endif  /* somMN_clsSetBtnKeyCombMP2_defined */
#ifndef somDS_AMouseM_clsSetBtnKeyCombMP2_defined
#define somDS_AMouseM_clsSetBtnKeyCombMP2_defined
static char *somDS_AMouseM_clsSetBtnKeyCombMP2 = "::M_AMouse::clsSetBtnKeyCombMP2";
static somId somDI_AMouseM_clsSetBtnKeyCombMP2 = &somDS_AMouseM_clsSetBtnKeyCombMP2;
#endif  /* somDS_AMouseM_clsSetBtnKeyCombMP2_defined */
#define AMouseM_clsSetBtnKeyCombMP2_somApRdDefault

/*
 * New Method: clsGetBtnKeyCombMP2
 */
#pragma linkage(AMouseM_clsGetBtnKeyCombMP2, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetBtnKeyCombMP2(M_AMouse *somSelf,
		ULONG ulKeyPageType,
		ULONG ulKeyNum);
#ifndef somMN_clsGetBtnKeyCombMP2_defined
#define somMN_clsGetBtnKeyCombMP2_defined
static char *somMN_clsGetBtnKeyCombMP2 = "clsGetBtnKeyCombMP2";
static somId somId_clsGetBtnKeyCombMP2 = &somMN_clsGetBtnKeyCombMP2;
#endif  /* somMN_clsGetBtnKeyCombMP2_defined */
#ifndef somDS_AMouseM_clsGetBtnKeyCombMP2_defined
#define somDS_AMouseM_clsGetBtnKeyCombMP2_defined
static char *somDS_AMouseM_clsGetBtnKeyCombMP2 = "::M_AMouse::clsGetBtnKeyCombMP2";
static somId somDI_AMouseM_clsGetBtnKeyCombMP2 = &somDS_AMouseM_clsGetBtnKeyCombMP2;
#endif  /* somDS_AMouseM_clsGetBtnKeyCombMP2_defined */
#define AMouseM_clsGetBtnKeyCombMP2_somApRdDefault

/*
 * New Method: clsSetWheelCount
 */
#pragma linkage(AMouseM_clsSetWheelCount, system)
SOM_Scope void  SOMLINK AMouseM_clsSetWheelCount(M_AMouse *somSelf,
		ULONG ulWheelCount);
#ifndef somMN_clsSetWheelCount_defined
#define somMN_clsSetWheelCount_defined
static char *somMN_clsSetWheelCount = "clsSetWheelCount";
static somId somId_clsSetWheelCount = &somMN_clsSetWheelCount;
#endif  /* somMN_clsSetWheelCount_defined */
#ifndef somDS_AMouseM_clsSetWheelCount_defined
#define somDS_AMouseM_clsSetWheelCount_defined
static char *somDS_AMouseM_clsSetWheelCount = "::M_AMouse::clsSetWheelCount";
static somId somDI_AMouseM_clsSetWheelCount = &somDS_AMouseM_clsSetWheelCount;
#endif  /* somDS_AMouseM_clsSetWheelCount_defined */
#define AMouseM_clsSetWheelCount_somApRdDefault

/*
 * New Method: clsGetWheelCount
 */
#pragma linkage(AMouseM_clsGetWheelCount, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetWheelCount(M_AMouse *somSelf);
#ifndef somMN_clsGetWheelCount_defined
#define somMN_clsGetWheelCount_defined
static char *somMN_clsGetWheelCount = "clsGetWheelCount";
static somId somId_clsGetWheelCount = &somMN_clsGetWheelCount;
#endif  /* somMN_clsGetWheelCount_defined */
#ifndef somDS_AMouseM_clsGetWheelCount_defined
#define somDS_AMouseM_clsGetWheelCount_defined
static char *somDS_AMouseM_clsGetWheelCount = "::M_AMouse::clsGetWheelCount";
static somId somDI_AMouseM_clsGetWheelCount = &somDS_AMouseM_clsGetWheelCount;
#endif  /* somDS_AMouseM_clsGetWheelCount_defined */
#define AMouseM_clsGetWheelCount_somApRdDefault

/*
 * New Method: clsSetApplications
 */
#pragma linkage(AMouseM_clsSetApplications, system)
SOM_Scope void  SOMLINK AMouseM_clsSetApplications(M_AMouse *somSelf,
		STRUCTAPPL* pstructApplications);
#ifndef somMN_clsSetApplications_defined
#define somMN_clsSetApplications_defined
static char *somMN_clsSetApplications = "clsSetApplications";
static somId somId_clsSetApplications = &somMN_clsSetApplications;
#endif  /* somMN_clsSetApplications_defined */
#ifndef somDS_AMouseM_clsSetApplications_defined
#define somDS_AMouseM_clsSetApplications_defined
static char *somDS_AMouseM_clsSetApplications = "::M_AMouse::clsSetApplications";
static somId somDI_AMouseM_clsSetApplications = &somDS_AMouseM_clsSetApplications;
#endif  /* somDS_AMouseM_clsSetApplications_defined */
#define AMouseM_clsSetApplications_somApRdDefault

/*
 * New Method: clsGetApplications
 */
#pragma linkage(AMouseM_clsGetApplications, system)
SOM_Scope STRUCTAPPL*  SOMLINK AMouseM_clsGetApplications(M_AMouse *somSelf);
#ifndef somMN_clsGetApplications_defined
#define somMN_clsGetApplications_defined
static char *somMN_clsGetApplications = "clsGetApplications";
static somId somId_clsGetApplications = &somMN_clsGetApplications;
#endif  /* somMN_clsGetApplications_defined */
#ifndef somDS_AMouseM_clsGetApplications_defined
#define somDS_AMouseM_clsGetApplications_defined
static char *somDS_AMouseM_clsGetApplications = "::M_AMouse::clsGetApplications";
static somId somDI_AMouseM_clsGetApplications = &somDS_AMouseM_clsGetApplications;
#endif  /* somDS_AMouseM_clsGetApplications_defined */
#define AMouseM_clsGetApplications_somApRdDefault

/*
 * New Method: clsSetPMCtlsFlags
 */
#pragma linkage(AMouseM_clsSetPMCtlsFlags, system)
SOM_Scope void  SOMLINK AMouseM_clsSetPMCtlsFlags(M_AMouse *somSelf,
		ULONG ulFlgPmCtls);
#ifndef somMN_clsSetPMCtlsFlags_defined
#define somMN_clsSetPMCtlsFlags_defined
static char *somMN_clsSetPMCtlsFlags = "clsSetPMCtlsFlags";
static somId somId_clsSetPMCtlsFlags = &somMN_clsSetPMCtlsFlags;
#endif  /* somMN_clsSetPMCtlsFlags_defined */
#ifndef somDS_AMouseM_clsSetPMCtlsFlags_defined
#define somDS_AMouseM_clsSetPMCtlsFlags_defined
static char *somDS_AMouseM_clsSetPMCtlsFlags = "::M_AMouse::clsSetPMCtlsFlags";
static somId somDI_AMouseM_clsSetPMCtlsFlags = &somDS_AMouseM_clsSetPMCtlsFlags;
#endif  /* somDS_AMouseM_clsSetPMCtlsFlags_defined */
#define AMouseM_clsSetPMCtlsFlags_somApRdDefault

/*
 * New Method: clsGetPMCtlsFlags
 */
#pragma linkage(AMouseM_clsGetPMCtlsFlags, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetPMCtlsFlags(M_AMouse *somSelf);
#ifndef somMN_clsGetPMCtlsFlags_defined
#define somMN_clsGetPMCtlsFlags_defined
static char *somMN_clsGetPMCtlsFlags = "clsGetPMCtlsFlags";
static somId somId_clsGetPMCtlsFlags = &somMN_clsGetPMCtlsFlags;
#endif  /* somMN_clsGetPMCtlsFlags_defined */
#ifndef somDS_AMouseM_clsGetPMCtlsFlags_defined
#define somDS_AMouseM_clsGetPMCtlsFlags_defined
static char *somDS_AMouseM_clsGetPMCtlsFlags = "::M_AMouse::clsGetPMCtlsFlags";
static somId somDI_AMouseM_clsGetPMCtlsFlags = &somDS_AMouseM_clsGetPMCtlsFlags;
#endif  /* somDS_AMouseM_clsGetPMCtlsFlags_defined */
#define AMouseM_clsGetPMCtlsFlags_somApRdDefault

/*
 * New Method: clsSetSmartCruise
 */
#pragma linkage(AMouseM_clsSetSmartCruise, system)
SOM_Scope void  SOMLINK AMouseM_clsSetSmartCruise(M_AMouse *somSelf,
		ULONG ulSmartCruise);
#ifndef somMN_clsSetSmartCruise_defined
#define somMN_clsSetSmartCruise_defined
static char *somMN_clsSetSmartCruise = "clsSetSmartCruise";
static somId somId_clsSetSmartCruise = &somMN_clsSetSmartCruise;
#endif  /* somMN_clsSetSmartCruise_defined */
#ifndef somDS_AMouseM_clsSetSmartCruise_defined
#define somDS_AMouseM_clsSetSmartCruise_defined
static char *somDS_AMouseM_clsSetSmartCruise = "::M_AMouse::clsSetSmartCruise";
static somId somDI_AMouseM_clsSetSmartCruise = &somDS_AMouseM_clsSetSmartCruise;
#endif  /* somDS_AMouseM_clsSetSmartCruise_defined */
#define AMouseM_clsSetSmartCruise_somApRdDefault

/*
 * New Method: clsGetSmartCruise
 */
#pragma linkage(AMouseM_clsGetSmartCruise, system)
SOM_Scope ULONG  SOMLINK AMouseM_clsGetSmartCruise(M_AMouse *somSelf);
#ifndef somMN_clsGetSmartCruise_defined
#define somMN_clsGetSmartCruise_defined
static char *somMN_clsGetSmartCruise = "clsGetSmartCruise";
static somId somId_clsGetSmartCruise = &somMN_clsGetSmartCruise;
#endif  /* somMN_clsGetSmartCruise_defined */
#ifndef somDS_AMouseM_clsGetSmartCruise_defined
#define somDS_AMouseM_clsGetSmartCruise_defined
static char *somDS_AMouseM_clsGetSmartCruise = "::M_AMouse::clsGetSmartCruise";
static somId somDI_AMouseM_clsGetSmartCruise = &somDS_AMouseM_clsGetSmartCruise;
#endif  /* somDS_AMouseM_clsGetSmartCruise_defined */
#define AMouseM_clsGetSmartCruise_somApRdDefault

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t M_AMouseSM[] = {
    {    &M_AMouseClassData.clsSaveData,
         &somId_clsSaveData,
         &somDI_AMouseM_clsSaveData,
         (somMethodProc *) AMouseM_clsSaveData,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSaveData_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSaveDataStubs) },
#endif
    {    &M_AMouseClassData.clsSetScrollMode,
         &somId_clsSetScrollMode,
         &somDI_AMouseM_clsSetScrollMode,
         (somMethodProc *) AMouseM_clsSetScrollMode,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetScrollMode_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetScrollModeStubs) },
#endif
    {    &M_AMouseClassData.clsGetScrollMode,
         &somId_clsGetScrollMode,
         &somDI_AMouseM_clsGetScrollMode,
         (somMethodProc *) AMouseM_clsGetScrollMode,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetScrollMode_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetScrollModeStubs) },
#endif
    {    &M_AMouseClassData.clsSetScrollNum,
         &somId_clsSetScrollNum,
         &somDI_AMouseM_clsSetScrollNum,
         (somMethodProc *) AMouseM_clsSetScrollNum,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetScrollNum_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetScrollNumStubs) },
#endif
    {    &M_AMouseClassData.clsGetScrollNum,
         &somId_clsGetScrollNum,
         &somDI_AMouseM_clsGetScrollNum,
         (somMethodProc *) AMouseM_clsGetScrollNum,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetScrollNum_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetScrollNumStubs) },
#endif
    {    &M_AMouseClassData.clsSetWheelTarget,
         &somId_clsSetWheelTarget,
         &somDI_AMouseM_clsSetWheelTarget,
         (somMethodProc *) AMouseM_clsSetWheelTarget,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetWheelTarget_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetWheelTargetStubs) },
#endif
    {    &M_AMouseClassData.clsGetWheelTarget,
         &somId_clsGetWheelTarget,
         &somDI_AMouseM_clsGetWheelTarget,
         (somMethodProc *) AMouseM_clsGetWheelTarget,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetWheelTarget_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetWheelTargetStubs) },
#endif
    {    &M_AMouseClassData.clsSetStartupMode,
         &somId_clsSetStartupMode,
         &somDI_AMouseM_clsSetStartupMode,
         (somMethodProc *) AMouseM_clsSetStartupMode,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetStartupMode_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetStartupModeStubs) },
#endif
    {    &M_AMouseClassData.clsGetStartupMode,
         &somId_clsGetStartupMode,
         &somDI_AMouseM_clsGetStartupMode,
         (somMethodProc *) AMouseM_clsGetStartupMode,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetStartupMode_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetStartupModeStubs) },
#endif
    {    &M_AMouseClassData.clsSetAccelDelay,
         &somId_clsSetAccelDelay,
         &somDI_AMouseM_clsSetAccelDelay,
         (somMethodProc *) AMouseM_clsSetAccelDelay,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetAccelDelay_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetAccelDelayStubs) },
#endif
    {    &M_AMouseClassData.clsGetAccelDelay,
         &somId_clsGetAccelDelay,
         &somDI_AMouseM_clsGetAccelDelay,
         (somMethodProc *) AMouseM_clsGetAccelDelay,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetAccelDelay_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetAccelDelayStubs) },
#endif
    {    &M_AMouseClassData.clsSetAccelValue,
         &somId_clsSetAccelValue,
         &somDI_AMouseM_clsSetAccelValue,
         (somMethodProc *) AMouseM_clsSetAccelValue,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetAccelValue_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetAccelValueStubs) },
#endif
    {    &M_AMouseClassData.clsGetAccelValue,
         &somId_clsGetAccelValue,
         &somDI_AMouseM_clsGetAccelValue,
         (somMethodProc *) AMouseM_clsGetAccelValue,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetAccelValue_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetAccelValueStubs) },
#endif
    {    &M_AMouseClassData.clsSetPollingRate,
         &somId_clsSetPollingRate,
         &somDI_AMouseM_clsSetPollingRate,
         (somMethodProc *) AMouseM_clsSetPollingRate,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetPollingRate_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetPollingRateStubs) },
#endif
    {    &M_AMouseClassData.clsGetPollingRate,
         &somId_clsGetPollingRate,
         &somDI_AMouseM_clsGetPollingRate,
         (somMethodProc *) AMouseM_clsGetPollingRate,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetPollingRate_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetPollingRateStubs) },
#endif
    {    &M_AMouseClassData.clsSetAccelLevel1,
         &somId_clsSetAccelLevel1,
         &somDI_AMouseM_clsSetAccelLevel1,
         (somMethodProc *) AMouseM_clsSetAccelLevel1,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetAccelLevel1_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetAccelLevel1Stubs) },
#endif
    {    &M_AMouseClassData.clsGetAccelLevel1,
         &somId_clsGetAccelLevel1,
         &somDI_AMouseM_clsGetAccelLevel1,
         (somMethodProc *) AMouseM_clsGetAccelLevel1,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetAccelLevel1_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetAccelLevel1Stubs) },
#endif
    {    &M_AMouseClassData.clsSetAccelLvl1Mult,
         &somId_clsSetAccelLvl1Mult,
         &somDI_AMouseM_clsSetAccelLvl1Mult,
         (somMethodProc *) AMouseM_clsSetAccelLvl1Mult,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetAccelLvl1Mult_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetAccelLvl1MultStubs) },
#endif
    {    &M_AMouseClassData.clsGetAccelLvl1Mult,
         &somId_clsGetAccelLvl1Mult,
         &somDI_AMouseM_clsGetAccelLvl1Mult,
         (somMethodProc *) AMouseM_clsGetAccelLvl1Mult,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetAccelLvl1Mult_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetAccelLvl1MultStubs) },
#endif
    {    &M_AMouseClassData.clsSetAccelLevel2,
         &somId_clsSetAccelLevel2,
         &somDI_AMouseM_clsSetAccelLevel2,
         (somMethodProc *) AMouseM_clsSetAccelLevel2,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetAccelLevel2_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetAccelLevel2Stubs) },
#endif
    {    &M_AMouseClassData.clsGetAccelLevel2,
         &somId_clsGetAccelLevel2,
         &somDI_AMouseM_clsGetAccelLevel2,
         (somMethodProc *) AMouseM_clsGetAccelLevel2,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetAccelLevel2_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetAccelLevel2Stubs) },
#endif
    {    &M_AMouseClassData.clsSetAccelLvl2Mult,
         &somId_clsSetAccelLvl2Mult,
         &somDI_AMouseM_clsSetAccelLvl2Mult,
         (somMethodProc *) AMouseM_clsSetAccelLvl2Mult,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetAccelLvl2Mult_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetAccelLvl2MultStubs) },
#endif
    {    &M_AMouseClassData.clsGetAccelLvl2Mult,
         &somId_clsGetAccelLvl2Mult,
         &somDI_AMouseM_clsGetAccelLvl2Mult,
         (somMethodProc *) AMouseM_clsGetAccelLvl2Mult,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetAccelLvl2Mult_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetAccelLvl2MultStubs) },
#endif
    {    &M_AMouseClassData.clsSetBtnMode,
         &somId_clsSetBtnMode,
         &somDI_AMouseM_clsSetBtnMode,
         (somMethodProc *) AMouseM_clsSetBtnMode,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetBtnMode_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetBtnModeStubs) },
#endif
    {    &M_AMouseClassData.clsGetBtnMode,
         &somId_clsGetBtnMode,
         &somDI_AMouseM_clsGetBtnMode,
         (somMethodProc *) AMouseM_clsGetBtnMode,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetBtnMode_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetBtnModeStubs) },
#endif
    {    &M_AMouseClassData.clsSetBtnKeyCombMP1,
         &somId_clsSetBtnKeyCombMP1,
         &somDI_AMouseM_clsSetBtnKeyCombMP1,
         (somMethodProc *) AMouseM_clsSetBtnKeyCombMP1,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetBtnKeyCombMP1_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetBtnKeyCombMP1Stubs) },
#endif
    {    &M_AMouseClassData.clsGetBtnKeyCombMP1,
         &somId_clsGetBtnKeyCombMP1,
         &somDI_AMouseM_clsGetBtnKeyCombMP1,
         (somMethodProc *) AMouseM_clsGetBtnKeyCombMP1,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetBtnKeyCombMP1_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetBtnKeyCombMP1Stubs) },
#endif
    {    &M_AMouseClassData.clsSetBtnKeyCombMP2,
         &somId_clsSetBtnKeyCombMP2,
         &somDI_AMouseM_clsSetBtnKeyCombMP2,
         (somMethodProc *) AMouseM_clsSetBtnKeyCombMP2,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetBtnKeyCombMP2_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetBtnKeyCombMP2Stubs) },
#endif
    {    &M_AMouseClassData.clsGetBtnKeyCombMP2,
         &somId_clsGetBtnKeyCombMP2,
         &somDI_AMouseM_clsGetBtnKeyCombMP2,
         (somMethodProc *) AMouseM_clsGetBtnKeyCombMP2,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetBtnKeyCombMP2_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetBtnKeyCombMP2Stubs) },
#endif
    {    &M_AMouseClassData.clsSetWheelCount,
         &somId_clsSetWheelCount,
         &somDI_AMouseM_clsSetWheelCount,
         (somMethodProc *) AMouseM_clsSetWheelCount,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetWheelCount_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetWheelCountStubs) },
#endif
    {    &M_AMouseClassData.clsGetWheelCount,
         &somId_clsGetWheelCount,
         &somDI_AMouseM_clsGetWheelCount,
         (somMethodProc *) AMouseM_clsGetWheelCount,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetWheelCount_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetWheelCountStubs) },
#endif
    {    &M_AMouseClassData.clsSetApplications,
         &somId_clsSetApplications,
         &somDI_AMouseM_clsSetApplications,
         (somMethodProc *) AMouseM_clsSetApplications,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetApplications_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetApplicationsStubs) },
#endif
    {    &M_AMouseClassData.clsGetApplications,
         &somId_clsGetApplications,
         &somDI_AMouseM_clsGetApplications,
         (somMethodProc *) AMouseM_clsGetApplications,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetApplications_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetApplicationsStubs) },
#endif
    {    &M_AMouseClassData.clsSetPMCtlsFlags,
         &somId_clsSetPMCtlsFlags,
         &somDI_AMouseM_clsSetPMCtlsFlags,
         (somMethodProc *) AMouseM_clsSetPMCtlsFlags,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetPMCtlsFlags_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetPMCtlsFlagsStubs) },
#endif
    {    &M_AMouseClassData.clsGetPMCtlsFlags,
         &somId_clsGetPMCtlsFlags,
         &somDI_AMouseM_clsGetPMCtlsFlags,
         (somMethodProc *) AMouseM_clsGetPMCtlsFlags,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetPMCtlsFlags_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetPMCtlsFlagsStubs) },
#endif
    {    &M_AMouseClassData.clsSetSmartCruise,
         &somId_clsSetSmartCruise,
         &somDI_AMouseM_clsSetSmartCruise,
         (somMethodProc *) AMouseM_clsSetSmartCruise,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsSetSmartCruise_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsSetSmartCruiseStubs) },
#endif
    {    &M_AMouseClassData.clsGetSmartCruise,
         &somId_clsGetSmartCruise,
         &somDI_AMouseM_clsGetSmartCruise,
         (somMethodProc *) AMouseM_clsGetSmartCruise,
         (somMethodProc *)((void*)-1),
#ifdef AMouseM_clsGetSmartCruise_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&AMouseM_clsGetSmartCruiseStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_AMouseOM[] = {
    {    &somId_M_AMousewpclsInitData,
         (somMethodProc *) AMouseM_wpclsInitData    },
    {    &somId_M_AMousewpclsUnInitData,
         (somMethodProc *) AMouseM_wpclsUnInitData    },
    {    &somId_M_AMousewpclsQueryDefaultView,
         (somMethodProc *) AMouseM_wpclsQueryDefaultView    },
    {    &somId_M_AMousewpclsQueryIcon,
         (somMethodProc *) AMouseM_wpclsQueryIcon    },
    {    &somId_M_AMousewpclsQueryDefaultHelp,
         (somMethodProc *) AMouseM_wpclsQueryDefaultHelp    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_M_AMouse = "M_AMouse";
static char * somPCN_M_AMouse_M_WPMouse = "M_WPMouse";

static somId somPCM_AMouse[] = {
    &somPCN_M_AMouse_M_WPMouse,
};

static somStaticClassInfo M_AMouseSCI = {
    4, 37, 5, 0, 0, 0,
    M_AMouse_MajorVersion, M_AMouse_MinorVersion,
    sizeof(M_AMouseData), M_AMouse_MaxNoMethods, 1,
    &somCN_M_AMouse,
    (somId) NULL, 1,
    somPCM_AMouse,
    (somClassDataStructure *) &M_AMouseClassData,
    (somCClassDataStructure *) &M_AMouseCClassData,
    M_AMouseSM, M_AMouseOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    37, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK M_AMouseNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;

    if (_M_AMouse && _somCheckVersion(_M_AMouse, somtmajorVersion, somtminorVersion))
          return _M_AMouse;
    M_WPMouseNewClass(M_WPMouse_MajorVersion,M_WPMouse_MinorVersion);	/* static reference */
    result = somBuildClass(0xFFFFFFFF,&M_AMouseSCI, somtmajorVersion, somtminorVersion);
    M_AMouse_parent_M_WPMouse_wpclsQueryDefaultHelp_resolved = 
	somParentNumResolve(M_AMouseCClassData.parentMtab, 1, M_WPObjectClassData.wpclsQueryDefaultHelp); 
    M_AMouse_parent_M_WPMouse_wpclsQueryIcon_resolved = 
	somParentNumResolve(M_AMouseCClassData.parentMtab, 1, M_WPObjectClassData.wpclsQueryIcon); 
    M_AMouse_parent_M_WPMouse_wpclsQueryDefaultView_resolved = 
	somParentNumResolve(M_AMouseCClassData.parentMtab, 1, M_WPObjectClassData.wpclsQueryDefaultView); 
    M_AMouse_parent_M_WPMouse_wpclsUnInitData_resolved = 
	somParentNumResolve(M_AMouseCClassData.parentMtab, 1, M_WPObjectClassData.wpclsUnInitData); 
    M_AMouse_parent_M_WPMouse_wpclsInitData_resolved = 
	somParentNumResolve(M_AMouseCClassData.parentMtab, 1, M_WPObjectClassData.wpclsInitData); 
    return result;
}

/*
 * Functions for attributes.
 */

#endif /* Primary Implementation Support */
#pragma info(restore)

#endif       /* SOM_M_AMouse_ih */
